<?
error_reporting(E_PARSE ^ E_ERROR );
//error_reporting(2047);

class OrdersController extends AppController
{
	//To avoid possible PHP4 problemfss
	var $name = "OrdersController";

	var $uses = array('Order', 'CallRecord', 'User', 'OrderItem',
                    'Timeslot', 'OrderStatus', 'OrderType', 'Item',
                    'Zone','PaymentMethod','ItemCategory','InventoryLocation',
					'OrderSubstatus','Coupon','Setting','CallResult');

	var $helpers = array('Common');
	var $components = array('HtmlAssist', 'Common', 'Lists');
	var $itemsToShow = 20;
	var $pagesToDisplay = 10;
	
	var $beforeFilter = array('checkAccess');

	function checkAccess()
	{
	  if( $this->action == 'index' ) {
		$this->Common->checkRoles(array('6','3','4','1','9','13'));
	  }
	  if( $this->action == 'editBooking' || $this->action == 'reschedule' || $this->action == 'cancel' ) {
		$this->Common->checkRoles(array('6','3','4','8','1','9','13'));
	  }    
	  if( $this->action == 'jobCheckout' ) {
		$this->Common->checkRoles(array('6','3','1','13'));
	  }
	  if( $this->action == 'dayendCheckout' ) {
		$this->Common->checkRoles(array('6','3','1','13'));
	  }
	  if( $this->action == 'scheduleView' ) {
		$this->Common->checkRoles(array('6','3','1','9','13'));
	  }
	  if( $this->action == 'ceoReport' ) {
		$this->Common->checkRoles(array('6'));
	  }
	  if( $this->action == 'followup' ) {
		$this->Common->checkRoles(array('1'));
	  }   
	}
	
	function check_email($email) {
	    if( (preg_match('/(@.*@)|(\.\.)|(@\.)|(\.@)|(^\.)/', $email)) ||
	        (preg_match('/^.+\@(\[?)[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,3}|[0-9]{1,3})(\]?)$/',$email)) ) {
	        
	    	return true;
	    }
	    else{
	    	return false;
	    }
	}

    // Method saves current customer's data 
    // NOTE: for now this method is invisible from the page. May be it should stay invisible forever
    // Created: 06/02/2010, Anthony Chernikov
    function _SaveCustomer()
    {
		$this->data['Customer']['phone'] = $this->data['Customer']['phone']!= '' ? $this->Common->preparePhone($this->data['Customer']['phone']):'';
		$this->data['Customer']['cell_phone'] = $this->data['Customer']['cell_phone'] != '' ? $this->Common->preparePhone($this->data['Customer']['cell_phone']) : '';
		$this->data['Customer']['postal_code'] = $this->data['Customer']['postal_code'] != '' ? $this->Common->prepareZip($this->data['Customer']['postal_code']) : '';

		if (strlen($this->data['Customer']['callback_date']) != 0)
			$this->data['Customer']['callback_date'] = date("Y-m-d", strtotime($this->data['Customer']['callback_date']));
		
		if($this->data['Customer']['callback_time_hour'] != '')
			$this->data['Customer']['callback_time'] = $this->data['Customer']['callback_time_hour'].':'.($this->data['Customer']['callback_time_min'] ? $this->data['Customer']['callback_time_min'] : '00');
		
		if (strlen($this->data['Customer']['lastcall_date']) != 0)
			$this->data['Customer']['lastcall_date'] = date("Y-m-d", strtotime($this->data['Customer']['lastcall_date']));
		
		$this->Order->Customer->save($this->data['Customer']);
		if( $this->data['Customer']['id'] == '') 
		{
			$this->data['Customer']['id'] = $this->Order->Customer->getLastInsertId();	
			// role
			$db =& ConnectionManager::getDataSource('default');
			$query = "replace into ace_rp_users_roles SET user_id = '".$this->data['Order']['customer_id']."',role_id = '8' ";
  			$db->_execute($query);
  		}
        
        //Save a common note - if we have one
		$note = $this->data['txt_customer_note'][0];
        if ($note!='')
        {
            $loggedUserId = $this->Common->getLoggedUserID();
            $this->User->id = $loggedUserId;
            $User_details = $this->User->read();
            $created_by = $User_details['User']['first_name'].' '.$User_details['User']['last_name'];
            $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
            $result = $db->_execute("INSERT INTO ace_rp_users_notes (user_id,note,note_date,created_by)
                                    VALUES(".$this->data['Customer']['id'].",
                                    '".str_replace("'","`",$note)."',now(),'".$created_by."')");
        }
    }
    
    // Method saves order's data that was recieved from the order's page.
    // Created: 06/02/2010, Anthony Chernikov
    function saveOrder($saveCustomer=1)
    {
		//Prepare the date for entry into the DB
		//Set nulls into the empty selects
		$this->Common->SetNull($this->data['Order']['booking_source_id']);
		$this->Common->SetNull($this->data['Order']['job_truck']);
		$this->Common->SetNull($this->data['Order']['order_type_id']);
                $this->Common->SetNull($this->data['Order']['customer_payment_method_id']);
		$this->Common->SetNull($this->data['Order']['customer_desired_payment_method_id']);
		$this->Common->SetNull($this->data['Order']['job_technician1_id']);
		$this->Common->SetNull($this->data['Order']['job_technician2_id']);
		$this->Common->SetNull($this->data['Order']['job_technician2_id']);
		$this->Common->SetNull($this->data['Order']['job_reference_id']);
		
		// Default booking date is today, telemarketer - current user
		$SendToDisp = false;
		if (!$this->data['Order']['id'])
		{
			$SendToDisp = true; //We'll be sending messages to the dispatcher for every new booking created
	        $this->data['Order']['booking_date'] = date('Y-m-d');
	        $this->data['Order']['booking_telemarketer_id'] = $this->Common->getLoggedUserID();
	        
	        // Also we need to set the 'created..' fields here
			$this->data['Order']['created_by'] = $this->Common->getLoggedUserID();
			$this->data['Order']['created_date'] = date('Y-m-d H:i:s');
		}
		else
		{
	        // For the existing orders set the 'modyfied..' fields
			$this->data['Order']['modified_by'] = $this->Common->getLoggedUserID();
			$this->data['Order']['modified_date'] = date('Y-m-d H:i:s');
		}
      
		// Default Order Status: booked (1)
		if (!$this->data['Order']['order_status_id']) $this->data['Order']['order_status_id'] = 1;

		// Default sub-status: Not confirmed (1)
		if ($this->data['Order']['order_substatus_id'] == '')
			$this->data['Order']['order_substatus_id'] = 1;

		// Default Customer: Customer ID == -1   ->  new customer
		if ($this->data['Customer']['id'] == -1) $this->data['Customer']['id'] = '';

		// Save the customer
		if ($saveCustomer==1)
			if (!empty($this->data['Customer'])) $this->_SaveCustomer();
	
			// Cancelled jobs shouldn't have a time
		if ($this->data['Order']['order_status_id'] == 3)
		{
			$this->data['Order']['job_time_beg_hour'] = '';
			$this->data['Order']['job_time_beg'] = '';
			$this->data['Order']['job_time_end_hour'] = '';
			$this->data['Order']['job_time_end'] = '';
		}
    
		// Get some customer's informatin into this order
		$this->data['Order']['job_postal_code'] = $this->data['Customer']['postal_code'];
		$this->data['Order']['customer_id'] = $this->data['Customer']['id'];

		// Convert the dates into the appropriate format
		$this->data['Order']['job_date'] = date("Y-m-d", strtotime($this->data['Order']['job_date']));
		$this->data['Order']['app_ordered_date'] = date("Y-m-d", strtotime($this->data['Order']['app_ordered_date']));
		$this->data['Order']['app_ordered_pickup_date'] = date("Y-m-d", strtotime($this->data['Order']['app_ordered_pickup_date']));
		$this->data['Order']['permit_applied_date'] = date("Y-m-d", strtotime($this->data['Order']['permit_applied_date']));
		
		//set beginning and ending time
		if($this->data['Order']['job_time_beg_hour'] != '')
			$this->data['Order']['job_time_beg'] = $this->data['Order']['job_time_beg_hour'].':'.($this->data['Order']['job_time_beg_min'] ? $this->data['Order']['job_time_beg_min'] : '00');
		if($this->data['Order']['job_time_end_hour'] != '')
			$this->data['Order']['job_time_end'] = $this->data['Order']['job_time_end_hour'].':'.($this->data['Order']['job_time_end_min'] ? $this->data['Order']['job_time_end_min'] : '00');
		//set techs' time
		if($this->data['Order']['fact_job_beg_hour'] != '')
			$this->data['Order']['fact_job_beg'] = $this->data['Order']['fact_job_beg_hour'].':'.($this->data['Order']['fact_job_beg_min'] ? $this->data['Order']['fact_job_beg_min'] : '00');
		if($this->data['Order']['fact_job_end_hour'] != '')
			$this->data['Order']['fact_job_end'] = $this->data['Order']['fact_job_end_hour'].':'.($this->data['Order']['fact_job_end_min'] ? $this->data['Order']['fact_job_end_min'] : '00');

		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		if ($this->data['Order']['order_status_id']!=6)
		{
			if ($this->data['Order']['id'])
			{
				$query = "SELECT order_number num FROM ace_rp_orders where id='".$this->data['Order']['id']."'";
				$result = $db->_execute($query);
				$row = mysql_fetch_array($result); 
				$this->data['Order']['order_number'] = $row['num'];
			}
			if (!$this->data['Order']['order_number'])
			{
				$query = "SELECT max(order_number) num FROM ace_rp_orders";
				$result = $db->_execute($query);
				$row = mysql_fetch_array($result); 
				$this->data['Order']['order_number'] = 1+$row['num'];
			}
		}

		// Trying to save the order
		$old_status = 0;
		$this->Order->id = $this->data['Order']['id'];
		if ($this->Order->id)
		{
			$query = "SELECT order_status_id FROM ace_rp_orders where id=".$this->Order->id;
			$result = $db->_execute($query);
			$row = mysql_fetch_array($result); 
			$old_status = $row['order_status_id'];
		}
		if ($this->Order->save($this->data))
		{
			//Get Order ID
			if ($this->Order->id)
			  $order_id = $this->Order->id;
			else
			  $order_id = $this->Order->getLastInsertId();
		// 1. Items
		// Clear Previous Order Items of class 'booking'
		//$this->Order->BookingItem->execute("DELETE FROM " . $this->Order->BookingItem->tablePrefix . "order_items WHERE order_id = '".$order_id."' AND class=0;");
		$this->Order->BookingItem->execute("DELETE FROM " . $this->Order->BookingItem->tablePrefix . "order_items WHERE order_id = '".$order_id."'");
		$total = 0;
		
		// Save booked items
		  for ($i = 0; $i < count($this->data['Order']['BookingItem']); $i++)
		{
			// Set ID of parent order
			$this->data['Order']['BookingItem'][$i]['order_id'] = $order_id;
			//$this->data['Order']['BookingItem'][$i]['class'] = 0;
			if (0+$this->data['Order']['BookingItem'][$i]['quantity']!=0)
			{
				$this->Order->BookingItem->create();
				$this->Order->BookingItem->save($this->data['Order']['BookingItem'][$i]);
				$total += $this->data['Order']['BookingItem'][$i]['quantity']*
						  $this->data['Order']['BookingItem'][$i]['price'] -
						  $this->data['Order']['BookingItem'][$i]['discount'] +
						  $this->data['Order']['BookingItem'][$i]['addition'];
			}
		}
				  
		// 2. Questions
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		for ($i = 0; $i < count($this->data['Order']['OrdersQuestions']); $i++)
		{
			// Set ID of parent order
			$this->data['Order']['OrdersQuestions'][$i]['order_id'] = $order_id;
			$db->_execute("delete from ace_rp_orders_questions where order_id=$order_id and question_number='{$this->data['Order']['OrdersQuestions'][$i]['question_number']}'");
			$query="insert INTO ace_rp_orders_questions
				  (order_id, for_office, for_tech, question, local_answer,
				   question_number, question_id, answers) 
				  VALUES
				  ('".$order_id."', '".$this->data['Order']['OrdersQuestions'][$i]['for_office']."',
				   '".$this->data['Order']['OrdersQuestions'][$i]['for_tech']."',
				   '".$this->data['Order']['OrdersQuestions'][$i]['question']."',
				   '".str_replace("'","`",$this->data['Order']['OrdersQuestions'][$i]['local_answer'])."',
				   '".$this->data['Order']['OrdersQuestions'][$i]['question_number']."',
				   '".$this->data['Order']['OrdersQuestions'][$i]['question_id']."',
				   '".$this->data['Order']['OrdersQuestions'][$i]['answers']."')";
			$db->_execute($query);
		}		            		            
			
		//Now E-Mail the customer with what we just did
		if ($this->data['Order']['order_status_id'] != 5)
		{
		  if($_POST['havetoprint'] == "1") 
			$this->emailCustomerBooking($order_id);
		}
		
		// Trying to create a sale record for the call history
		// if there is no such record yet
		$sql = "SELECT count(*) cnt
			  FROM ace_rp_call_history h, ace_rp_orders o
			 WHERE h.customer_id='" .$this->data['Customer']['id'] ."'
				 AND o.id='" .$this->data['Order']['id'] ."'
					   AND h.call_date = o.booking_date";
				
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$result = $db->_execute($sql);
		$row = mysql_fetch_array($result);
		if (1*$row['cnt']==0) 
			  $this->AddCallToHistory(
				  $this->data['Customer']['id'],
				  $this->data['Order']['booking_telemarketer_id'],
				  1,'','','','','web');
		}
		if ($SendToDisp)
		{
			$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
			$sql = "INSERT INTO ace_rp_messages
					(txt, state, from_user, from_date, 
					 to_user, to_date, to_time, file_link)
			 VALUES ('A new job has been booked', 0, ".$this->Common->getLoggedUserID().", current_date(),
					 57499, current_date(), '00:00', ".$order_id.")";
			$db->_execute($sql);
			$sql = "INSERT INTO ace_rp_messages
					(txt, state, from_user, from_date, 
					 to_user, to_date, to_time, file_link)
			 VALUES ('A new job has been booked', 0, ".$this->Common->getLoggedUserID().", current_date(),
					 132038, current_date(), '00:00', ".$order_id.")";
			$db->_execute($sql);
		}

		//Forward user where they need to be - if this is a single action per view
		if (($old_status == 1)&&($this->data['Order']['order_status_id'] == 2))
			$this->reschedule();
		elseif ($this->data['rurl'][0])
			$this->redirect($this->data['rurl'][0]);
		else
			$this->redirect('/orders/scheduleView');
    }
    
	// Function Name: Edit Booking
	// Hardcoded:	* User Roles
	function editBooking()
	{
		$this->layout='edit';
		if (!empty($this->data['Order']))
		{
			//If order information is submitted - save the order
			$this->saveOrder();
			
			//$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
			//$sql = "INSERT INTO";
			//$db->_execute($sql);
			
		}
		else
		{
			// If no order data is submitted, we'll have one of the following situations:
			// 1. we are being asked to display an existing order's data ($order_id!='')
			// 2. we are being asked to create a new order for an existing customer ($order_id=='', $customer_id!='')
			// 3. we are being asked to create a completely new customer ($order_id=='', $customer_id=='')
			// Check submitted data for any special parameters to be set
			$order_id = $this->params['url']['order_id'];
			$customer_id = $this->params['url']['customer_id'];
			$num_items = 0;
			$show_app_order='display:none';
			$show_permits = 'display:none';
			
			// If order ID is submitted, prepare order's data to be displayed
			if ($order_id)
			{
				// Read the order's data from database
				$this->Order->id = $order_id;
				$this->data = $this->Order->read();
		
				$h_booked='';
				$h_tech='';
				foreach ($this->data['BookingItem'] as $oi)
				{
					if ($oi['class']==0)
					{
						$h_booked .= '<tr id="order_'.$num_items.'" class="booked">';
						$h_booked .= $this->_itemHTML($num_items, $oi, true);
						$h_booked .= '</tr>';
					}
					else
					{
						$h_tech .= '<tr id="order_'.$num_items.'" class="extra">';
						$h_tech .= $this->_itemHTML($num_items, $oi, true);
						$h_tech .= '</tr>';
					}
					$num_items++;
				}
				foreach ($this->data['BookingCoupon'] as $oi)
				{
					$oi['price'] = 0-$oi['price'];
					$oi['quantity'] = 1;
					$oi['name'] = 'Discount';
					$h_booked .= '<tr id="order_'.$num_items.'" class="booked">';
					$h_booked .= $this->_itemHTML($num_items, $oi, true);
					$h_booked .= '</tr>';
					$num_items++;
				}
				$this->set('booked_items', $h_booked);
				$this->set('tech_items', $h_tech);
      
				//Check the job type category
				$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
				$query = "select category_id from ace_rp_order_types where id='".$this->data['Order']['order_type_id']."'";
				$result = $db->_execute($query);
				$row = mysql_fetch_array($result, MYSQL_ASSOC);
				if (($row['category_id']=='2')||($this->data['Order']['order_type_id']==10)||($this->data['Order']['order_type_id']==31)) $show_app_order='';
		
				if (!$this->data['Order']['app_ordered_pickup_date'])
					$this->data['Order']['app_ordered_pickup_date'] = date('d M Y');
				else
					$this->data['Order']['app_ordered_pickup_date'] = date('d M Y', strtotime($this->data['Order']['app_ordered_pickup_date']));
					
				if (!$this->data['Order']['app_ordered_date'])
					$this->data['Order']['app_ordered_date'] = date('d M Y');
				else
					$this->data['Order']['app_ordered_date'] = date('d M Y', strtotime($this->data['Order']['app_ordered_date']));
              
				//Load current questions
				$this->set('CurrentQuestionsTextOffice', $this->_showQuestions($order_id, 0));
				$this->set('CurrentQuestionsTextTech', $this->_showQuestions($order_id, 1));
		
				//Load Created By 
				$created_by = $this->data['Order']['created_by'];
				if($this->data['Order']['created_date'] != '')
				  $created_date = date('d M Y (H:i:s)', strtotime($this->data['Order']['created_date']));
				else
				  $created_date = '';
          
          //Load Modified By
          $modified_by = $this->data['Order']['modified_by'];
          if($this->data['Order']['modified_date'] != '')
            $modified_date = date('d M Y (H:i:s)', strtotime($this->data['Order']['modified_date']));
          else
            $modified_date = '';
            
          //Permits and so on
          $this->OrderType->id = $this->data['Order']['order_type_id'];
          $aa = $this->OrderType->read();
          $this->data['OrderType'] = $aa['OrderType'];
          if ($this->data['OrderType']['category_id']==2)
            $show_permits = '';
            
            //Techs' commissions
            $comm = $this->requestAction('/commissions/getForOrder/'.$order_id);
            $tech1_comm = $comm[1]['total_comm'];
            $tech2_comm = $comm[2]['total_comm'];
            if ($this->data['Order']['booking_source_id']==$this->data['Order']['job_technician1_id'])
                $tech1_comm += $comm[3]['total_comm'];
            elseif ($this->data['Order']['booking_source_id']==$this->data['Order']['job_technician2_id'])
                $tech2_comm += $comm[3]['total_comm'];
            elseif ($this->data['Order']['booking_source2_id']==$this->data['Order']['job_technician1_id'])
                $tech1_comm += $comm[4]['total_comm'];
            elseif ($this->data['Order']['booking_source2_id']==$this->data['Order']['job_technician2_id'])
                $tech2_comm += $comm[4]['total_comm'];
            $this->set('tech1_comm', $tech1_comm);
            $this->set('tech2_comm', $tech2_comm);
            $this->set('tech1_comm_link', BASE_URL."/commissions/calculateCommissions?cur_ref=".$this->data['Order']['order_number']);
            $this->set('tech2_comm_link', BASE_URL."/commissions/calculateCommissions?cur_ref=".$this->data['Order']['order_number']);
		}
        else
        {
			// The 'new order' situation
			$created_by = $this->Common->getLoggedUserID();
			$created_date = date('Y-m-d H:i'); 
			$modified_by = $this->Common->getLoggedUserID();
			$modified_date = date('Y-m-d H:i'); 
	
			// Retrieve an additional information from the submitted parameters
			$this->data['Order']['job_date'] = $this->params['url']['job_date'];
			$this->data['Order']['job_time_beg'] = $this->params['url']['job_time_beg'];
			$this->data['Order']['job_technician1_id'] = $this->params['url']['job_technician1_id'];
			$this->data['Order']['job_technician2_id'] = $this->params['url']['job_technician2_id'];
	
			// Orders created by the 'new callback' action are callbacks
			if ($_GET['action_type'] == 'callback')
				$this->data['Order']['order_status_id'] = 7;
			else
				$this->data['Order']['order_status_id'] = 1;
			
				// Default sub-status: Not confirmed (1)
				$this->data['Order']['order_substatus_id'] = 1;
		
				// Default source for the new order is:
				// 1. a currently logged telemarketer or
				// 2. empty - if the current user has another role
				if (($this->Common->getLoggedUserRoleID() == 3)
				  ||($this->Common->getLoggedUserRoleID() == 9))	//TELEMARKETER OR LIMITED TELEMARKETER
					$this->data['Order']['booking_source_id'] = $this->Common->getLoggedUserID();
		
				// If customer ID is submitted, read the customer's data   
				if ($customer_id)
				{
					$this->Order->Customer->id = $customer_id;
					$aa = $this->Order->Customer->read();
					$this->data['Customer'] = $aa['User'];
				}
				
				// Generating new invoice number
				$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
				$query = "SELECT max(order_number) num FROM ace_rp_orders";
				$result = $db->_execute($query);
				$row = mysql_fetch_array($result); 
				$this->data['Order']['order_number'] = 1+$row['num'];
			}				
		}
		$this->set('num_items', $num_items);
					
		// New call history records are callbacks by default 
		$this->data['CallRecord']['call_result_id'] = 2;
		$this->data['CallRecord']['call_date'] = date("d M Y");
		$this->data['CallRecord']['call_user_id'] = $this->Common->getLoggedUserID();
		$this->data['CallRecord']['callback_user_id'] = $this->Common->getLoggedUserID();
		
		// Currently open page
		if ($this->params['url']['action_type']=='callback')
		{
			$this->set('tab_num',3);
			$this->set('tab1','tabOff');
			$this->set('tab3','tabOver');
			$this->set('page1','none');
			$this->set('page3','block');
		}
		else
		{
			$this->set('tab_num',1);
			$this->set('tab1','tabOver');
			$this->set('tab3','tabOff');
			$this->set('page1','block');
			$this->set('page3','none');
		}
    
		// PREPARE DATA FOR UI
		// Get Associated Options
		if (!$this->data['Order']['permit_applied_date'])
			$this->data['Order']['permit_applied_date'] = date('d M Y');
		else
			$this->data['Order']['permit_applied_date'] = date('d M Y', strtotime($this->data['Order']['permit_applied_date']));
			
		$this->set('job_trucks', $this->HtmlAssist->table2array($this->InventoryLocation->findAll(array('type' => '2'), null, null, null, 1, 0), 'id', 'name'));
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		
		$query =  "SELECT id, CONCAT(name, REPLACE(REPLACE(flagactive, 0, ' [INACTIVE]'), 1, '')) AS truck FROM ace_rp_inventory_locations";
		
		$items = array();
		$result = $db->_execute($query);
		while($row = mysql_fetch_array($result, MYSQL_ASSOC))
		{
			foreach ($row as $k => $v)
			  $items[$row['id']][$k] = $v;
		}
		
		$this->set('job_trucks2', $items);
		//$this->set('job_trucks2', $this->HtmlAssist->table2array($this->InventoryLocation->findAll($query), 'id', 'truck'));
		
		$this->set('job_statuses', $this->HtmlAssist->table2array($this->OrderStatus->findAll(), 'id', 'name'));
		$this->set('job_types', $this->HtmlAssist->table2array($this->OrderType->findAll(array("OrderType.flagactive",1)), 'id', 'name'));
		$this->set('call_results', $this->HtmlAssist->table2array($this->CallResult->findAll(), 'id', 'name'));
		$this->set('booking_sources', $this->Lists->BookingSources());
		$this->set('admins', $this->Lists->Admins());
		$this->set('verificators', $this->Lists->Supervisors());
		$this->set('payment_methods', $this->HtmlAssist->table2array($this->Order->PaymentMethod->findAll(), 'id', 'name'));
		$this->set('sub_status', $this->HtmlAssist->table2array($this->Order->OrderSubstatus->findAll(), 'id', 'name'));
		$this->set('allTechnician',$this->Lists->Technicians(true));
		$this->set('allSuppliers',$this->Lists->ListTable('ace_rp_suppliers','',array('name','phone')));
		$this->set('allPermitMethods',$this->Lists->ListTable('ace_rp_apply_methods'));    
		$this->set('allPermitStates',$this->Lists->ListTable('ace_rp_permit_states'));    
		$this->set('allCities',$this->Lists->ListTable('ace_rp_cities'));    
		$this->set('txt_customer_note','');
		$this->set('show_app_order',  $show_app_order);
		$this->set('show_permits', $show_permits);
		$this->set('comm_roles',$this->Lists->ListTable('ace_rp_commissions_roles'));
    
		// Past Order View Mode
		if ($this->data['Status']['name'] == 'Done') $this->set('ViewMode', 1);

		$this->data['Coupon'] = $this->Coupon->findAll();

		//Make Redo Orders List
		//$redo_orders = $this->_getPreviousJobs($this->data['Customer']['id']);
		if ($this->data['Order']['job_estimate_id'])
		{
			$past_orders = $this->Order->findAll(array('Order.id'=> $this->data['Order']['job_estimate_id']), null, "job_date DESC", null, null, 1);
			foreach ($past_orders as $ord)
				$job_estimate_text = 'REF# '.$ord['Order']['order_number'].' - '.date('d M Y', strtotime($ord['Order']['job_date']));
		}
    
		// Find customer's notes
		if ($this->data['Customer']['id'])
		{
        $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
        $query = "SELECT * FROM ace_rp_users_notes WHERE user_id=".$this->data['Customer']['id']." ORDER BY note_date DESC";
        $result = $db->_execute($query);
        while ($row = mysql_fetch_array($result)) 
            $customer_notes[$row['id']] = $row;
		}
		$this->set('past_orders', $past_orders);
		$this->set('redo_orders', $redo_orders);
		$this->set('customer_notes',$customer_notes);
		$this->set('job_estimate_text',$job_estimate_text); 

		// Prepare dates for selector
		if ((strlen($this->data['Order']['job_date']) > 0) && ($this->data['Order']['job_date'] != "0000-00-00"))
			$this->data['Order']['job_date'] = date("d M Y", strtotime($this->data['Order']['job_date']));
		if ((strlen($this->data['CallRecord']['callback_date']) > 0) && ($this->data['CallRecord']['callback_date'] != "0000-00-00"))
			$this->data['CallRecord']['callback_date'] = date("d M Y", strtotime($this->data['CallRecord']['callback_date']));
		if ((strlen($this->data['CallRecord']['call_date']) > 0) && ($this->data['CallRecord']['call_date'] != "0000-00-00"))
			$this->data['CallRecord']['call_date'] = date("d M Y", strtotime($this->data['CallRecord']['call_date']));

		// Load created/modified Info
		$this->User->id = $created_by;
		$User_details = $this->User->read();
		$created_by = $User_details['User']['first_name'].' '.$User_details['User']['last_name'];
    
		$this->User->id = $modified_by;
		$User_details = $this->User->read();
		$modified_by = $User_details['User']['first_name'].' '.$User_details['User']['last_name'];
    
		$this->set('created_date',$created_date);
		$this->set('modified_by',$modified_by);
		$this->set('created_by',$created_by);
		$this->set('modified_date',$modified_date);
	}

	// Function Name: Tech Booking
	// Hardcoded:	* User Roles
	function techBooking()
	{
		$this->layout='edit';
		if (!empty($this->data['Order']))
		{
			//If order information is submitted - save the order
			$this->saveOrder(0);
		}
		else
		{
			// If no order data is submitted, we'll have one of the following situations:
			// 1. we are being asked to display an existing order's data ($order_id!='')
			// 2. we are being asked to create a new order for an existing customer ($order_id=='', $customer_id!='')
			// 3. we are being asked to create a completely new customer ($order_id=='', $customer_id=='')
			// Check submitted data for any special parameters to be set
			$order_id = $this->params['url']['order_id'];
			$customer_id = $this->params['url']['customer_id'];
		    $num_items = 0;
        
			// If order ID is submitted, prepare order's data to be displayed
			if ($order_id)
			{
				// Read the order's data from database
				$this->Order->id = $order_id;
				$this->data = $this->Order->read();

		        $h_booked='';
		        $h_tech='';
            $b_actions = false;
            $s_actions = false;
						if (($this->Common->getLoggedUserID()==$this->data['Order']['booking_source_id'])
								||($this->Common->getLoggedUserID()==$this->data['Order']['booking_source2_id']))
                $b_actions = true;
						if (($this->Common->getLoggedUserID()==$this->data['Order']['job_technician1_id'])
								||($this->Common->getLoggedUserID()==$this->data['Order']['job_technician2_id']))
                $s_actions = true;
		        foreach ($this->data['BookingItem'] as $oi)
		        {
		          if ($oi['class']==0)
		          {
		            $h_booked .= '<tr id="order_'.$num_items.'" class="booked">';
		            $h_booked .= $this->_itemHTML($num_items, $oi, $b_actions);
		            $h_booked .= '</tr>';
		          }
		          else
		          {
		            $h_tech .= '<tr id="order_'.$num_items.'" class="extra">';
		            $h_tech .= $this->_itemHTML($num_items, $oi, $s_actions);
		            $h_tech .= '</tr>';
		          }
		          $num_items++;
		        }
		        foreach ($this->data['BookingCoupon'] as $oi)
		        {
		          $oi['price'] = 0-$oi['price'];
		          $oi['quantity'] = 1;
		          $oi['name'] = 'Discount';
		          $h_booked .= '<tr id="order_'.$num_items.'" class="booked">';
		          $h_booked .= $this->_itemHTML($num_items, $oi, false);
		          $h_booked .= '</tr>';
		          $num_items++;
		        }
		        $this->set('booked_items', $h_booked);
		        $this->set('tech_items', $h_tech);
        
		        //Load current questions
            $this->set('CurrentQuestionsTextOffice', $this->_showQuestions($order_id, 0));
            $this->set('CurrentQuestionsTextTech', $this->_showQuestions($order_id, 1));

				//Load Created By 
				$created_by = $this->data['Order']['created_by'];
				if($this->data['Order']['created_date'] != '')
					$created_date = date('d M Y (H:i:s)', strtotime($this->data['Order']['created_date']));
				else
				$created_date = '';
				
				//Load Modified By
				$modified_by = $this->data['Order']['modified_by'];
				if($this->data['Order']['modified_date'] != '')
					$modified_date = date('d M Y (H:i:s)', strtotime($this->data['Order']['modified_date']));
				else
	            $modified_date = '';
			}
			else
			{
		        // Retrieve an additional information from the submitted parameters
				$this->data['Order']['job_date'] = $this->params['url']['job_date'];
				$this->data['Order']['job_time_beg'] = $this->params['url']['job_time_beg'];
				$this->data['Order']['job_technician1_id'] = $this->params['url']['job_technician1_id'];
				$this->data['Order']['job_technician2_id'] = $this->params['url']['job_technician2_id'];
        
				$this->data['Order']['order_status_id'] = 1;
				
		        // Default sub-status: Not confirmed (1)
		        $this->data['Order']['order_substatus_id'] = 1;
		
            $this->data['Order']['booking_source_id'] = $this->Common->getLoggedUserID();
        
		        // If customer ID is submitted, read the customer's data   
				if ($customer_id)
				{
		            $this->Order->Customer->id = $customer_id;
		            $aa = $this->Order->Customer->read();
		            $this->data['Customer'] = $aa['User'];
				}
				
				// Generating new invoice number
		        $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		        $query = "SELECT max(order_number) num FROM ace_rp_orders";
		        $result = $db->_execute($query);
		        $row = mysql_fetch_array($result); 
				$this->data['Order']['order_number'] = 1+$row['num'];
			}				
		}
		$this->set('num_items', $num_items);
		
		// PREPARE DATA FOR UI
		// Get Associated Options
		$this->set('job_trucks', $this->HtmlAssist->table2array($this->InventoryLocation->findAll(array('type' => '2'), null, null, null, 1, 0), 'id', 'name'));
		$this->set('job_statuses', $this->HtmlAssist->table2array($this->OrderStatus->findAll(), 'id', 'name'));
		$this->set('job_types', $this->HtmlAssist->table2array($this->OrderType->findAll(array("OrderType.flagactive",1)), 'id', 'name'));
		$this->set('call_results', $this->HtmlAssist->table2array($this->CallResult->findAll(), 'id', 'name'));
		$this->set('booking_sources', $this->Lists->BookingSources());
		$this->set('admins', $this->Lists->Admins());
		$this->set('verificators', $this->Lists->Supervisors());
		$this->set('payment_methods', $this->HtmlAssist->table2array($this->Order->PaymentMethod->findAll(), 'id', 'name'));
		$this->set('sub_status', $this->HtmlAssist->table2array($this->Order->OrderSubstatus->findAll(), 'id', 'name'));
		$this->set('allTechnician',$this->Lists->Technicians(true));
		$this->set('txt_customer_note','');
    
		// Past Order View Mode
		if ($this->data['Status']['name'] == 'Done') $this->set('ViewMode', 1);

		// Find customer's history and notes
		if ($this->data['Customer']['id'])
		{
	        // 1. History
	        //Make Redo Orders List
	        //$redo_orders = $this->_getPreviousJobs($this->data['Customer']['id']);
        if ($this->data['Order']['job_estimate_id'])
        {
            $past_orders = $this->Order->findAll(array('Order.id'=> $this->data['Order']['job_estimate_id']), null, "job_date DESC", null, null, 1);
            foreach ($past_orders as $ord)
                $job_estimate_text = 'REF# '.$ord['Order']['order_number'].' - '.date('d M Y', strtotime($ord['Order']['job_date']));
        }
			
	        // 2. Customer Notes
	        $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
	        $query = "SELECT * FROM ace_rp_users_notes WHERE user_id=".$this->data['Customer']['id']." ORDER BY note_date DESC";
	        $result = $db->_execute($query);
	        while ($row = mysql_fetch_array($result)) 
	            $customer_notes[$row['id']] = $row;
		}
	    $this->set('past_orders', $past_orders);
	    $this->set('redo_orders', $redo_orders);
		$this->set('customer_notes',$customer_notes);
		$this->set('job_estimate_text',$job_estimate_text); 

		// Prepare dates for selector
		if ((strlen($this->data['Order']['job_date']) > 0) && ($this->data['Order']['job_date'] != "0000-00-00"))
			$this->data['Order']['job_date'] = date("d M Y", strtotime($this->data['Order']['job_date']));
	}
	
	function techCustomerInterest()
	{
		$this->layout='edit';
		if (!empty($this->data['Order']))
		{
			//If order information is submitted - save the order
			$this->saveOrder(0);
		}
		else
		{
			// If no order data is submitted, we'll have one of the following situations:
			// 1. we are being asked to display an existing order's data ($order_id!='')
			// 2. we are being asked to create a new order for an existing customer ($order_id=='', $customer_id!='')
			// 3. we are being asked to create a completely new customer ($order_id=='', $customer_id=='')
			// Check submitted data for any special parameters to be set
			$order_id = $this->params['url']['order_id'];
			$customer_id = $this->params['url']['customer_id'];
		    $num_items = 0;
        
			// If order ID is submitted, prepare order's data to be displayed
			if ($order_id)
			{
				// Read the order's data from database
				$this->Order->id = $order_id;
				$this->data = $this->Order->read();

		        $h_booked='';
		        $h_tech='';
            $b_actions = false;
            $s_actions = false;
						if (($this->Common->getLoggedUserID()==$this->data['Order']['booking_source_id'])
								||($this->Common->getLoggedUserID()==$this->data['Order']['booking_source2_id']))
                $b_actions = true;
						if (($this->Common->getLoggedUserID()==$this->data['Order']['job_technician1_id'])
								||($this->Common->getLoggedUserID()==$this->data['Order']['job_technician2_id']))
                $s_actions = true;
		        foreach ($this->data['BookingItem'] as $oi)
		        {
		          if ($oi['class']==0)
		          {
		            $h_booked .= '<tr id="order_'.$num_items.'" class="booked">';
		            $h_booked .= $this->_itemHTML($num_items, $oi, $b_actions);
		            $h_booked .= '</tr>';
		          }
		          else
		          {
		            $h_tech .= '<tr id="order_'.$num_items.'" class="extra">';
		            $h_tech .= $this->_itemHTML($num_items, $oi, $s_actions);
		            $h_tech .= '</tr>';
		          }
		          $num_items++;
		        }
		        foreach ($this->data['BookingCoupon'] as $oi)
		        {
		          $oi['price'] = 0-$oi['price'];
		          $oi['quantity'] = 1;
		          $oi['name'] = 'Discount';
		          $h_booked .= '<tr id="order_'.$num_items.'" class="booked">';
		          $h_booked .= $this->_itemHTML($num_items, $oi, false);
		          $h_booked .= '</tr>';
		          $num_items++;
		        }
		        $this->set('booked_items', $h_booked);
		        $this->set('tech_items', $h_tech);
        
		        //Load current questions
            $this->set('CurrentQuestionsTextOffice', $this->_showQuestions($order_id, 0));
            $this->set('CurrentQuestionsTextTech', $this->_showQuestions($order_id, 1));

				//Load Created By 
				$created_by = $this->data['Order']['created_by'];
				if($this->data['Order']['created_date'] != '')
					$created_date = date('d M Y (H:i:s)', strtotime($this->data['Order']['created_date']));
				else
				$created_date = '';
				
				//Load Modified By
				$modified_by = $this->data['Order']['modified_by'];
				if($this->data['Order']['modified_date'] != '')
					$modified_date = date('d M Y (H:i:s)', strtotime($this->data['Order']['modified_date']));
				else
	            $modified_date = '';
			}
			else
			{
		        // Retrieve an additional information from the submitted parameters
				$this->data['Order']['job_date'] = $this->params['url']['job_date'];
				$this->data['Order']['job_time_beg'] = $this->params['url']['job_time_beg'];
				$this->data['Order']['job_technician1_id'] = $this->params['url']['job_technician1_id'];
				$this->data['Order']['job_technician2_id'] = $this->params['url']['job_technician2_id'];
        
				$this->data['Order']['order_status_id'] = 7;
				
		        // Default sub-status: Not confirmed (1)
		        $this->data['Order']['order_substatus_id'] = 1;
		
            $this->data['Order']['booking_source_id'] = $this->Common->getLoggedUserID();
        
		        // If customer ID is submitted, read the customer's data   
				if ($customer_id)
				{
		            $this->Order->Customer->id = $customer_id;
		            $aa = $this->Order->Customer->read();
		            $this->data['Customer'] = $aa['User'];
				}
				
				// Generating new invoice number
		        $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		        $query = "SELECT max(order_number) num FROM ace_rp_orders";
		        $result = $db->_execute($query);
		        $row = mysql_fetch_array($result); 
				$this->data['Order']['order_number'] = 1+$row['num'];
			}				
		}
		$this->set('num_items', $num_items);
		
		// PREPARE DATA FOR UI
		// Get Associated Options
		$this->set('job_trucks', $this->HtmlAssist->table2array($this->InventoryLocation->findAll(array('type' => '2'), null, null, null, 1, 0), 'id', 'name'));
		$this->set('job_statuses', $this->HtmlAssist->table2array($this->OrderStatus->findAll(), 'id', 'name'));
		$this->set('job_types', $this->HtmlAssist->table2array($this->OrderType->findAll(array("OrderType.flagactive",1)), 'id', 'name'));
		$this->set('call_results', $this->HtmlAssist->table2array($this->CallResult->findAll(), 'id', 'name'));
		$this->set('booking_sources', $this->Lists->BookingSources());
		$this->set('admins', $this->Lists->Admins());
		$this->set('verificators', $this->Lists->Supervisors());
		$this->set('payment_methods', $this->HtmlAssist->table2array($this->Order->PaymentMethod->findAll(), 'id', 'name'));
		$this->set('sub_status', $this->HtmlAssist->table2array($this->Order->OrderSubstatus->findAll(), 'id', 'name'));
		$this->set('allTechnician',$this->Lists->Technicians(true));
		$this->set('txt_customer_note','');
    
		// Past Order View Mode
		if ($this->data['Status']['name'] == 'Done') $this->set('ViewMode', 1);

		// Find customer's history and notes
		if ($this->data['Customer']['id'])
		{
	        // 1. History
	        //Make Redo Orders List
	        //$redo_orders = $this->_getPreviousJobs($this->data['Customer']['id']);
        if ($this->data['Order']['job_estimate_id'])
        {
            $past_orders = $this->Order->findAll(array('Order.id'=> $this->data['Order']['job_estimate_id']), null, "job_date DESC", null, null, 1);
            foreach ($past_orders as $ord)
                $job_estimate_text = 'REF# '.$ord['Order']['order_number'].' - '.date('d M Y', strtotime($ord['Order']['job_date']));
        }
			
	        // 2. Customer Notes
	        $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
	        $query = "SELECT * FROM ace_rp_users_notes WHERE user_id=".$this->data['Customer']['id']." ORDER BY note_date DESC";
	        $result = $db->_execute($query);
	        while ($row = mysql_fetch_array($result)) 
	            $customer_notes[$row['id']] = $row;
		}
	    $this->set('past_orders', $past_orders);
	    $this->set('redo_orders', $redo_orders);
		$this->set('customer_notes',$customer_notes);
		$this->set('job_estimate_text',$job_estimate_text); 

		// Prepare dates for selector
		if ((strlen($this->data['Order']['job_date']) > 0) && ($this->data['Order']['job_date'] != "0000-00-00"))
			$this->data['Order']['job_date'] = date("d M Y", strtotime($this->data['Order']['job_date']));
	}
    
    // Method renders call history into the table
    function getCallHistory()
    {
        $customer_id = $_GET['customer_id'];
        $phone = $_GET['phone'];
        
        if ((!$customer_id)&&(!$phone)) exit;
        
        $phone = preg_replace("/[- \.]/", "", $phone);
        
        //Telemarketers will not see 'Answering Machine' results
        $ans = '';
        if (($this->Common->getLoggedUserRoleID() == 3)
		    ||($this->Common->getLoggedUserRoleID() == 13)
         	||($this->Common->getLoggedUserRoleID() == 9))
            $ans = 'call_result_id!=6 and';
        
	    $users=$this->Lists->BookingSources();
	    $call_results=$this->Lists->ListTable('ace_rp_call_results');
	       
        echo "<script>";
        echo "function DeleteCallRecord(rec_id, cust_id){";
        echo "$.get('".BASE_URL."/orders/deleteCallRecord', {record_id:rec_id}, function(data){";
				echo "$.get('".BASE_URL."/orders/getCallHistory', {phone:".$phone."}, function(data){";
				echo "showhist=1;$('#CallHistory').html(data);});});";
        echo "}";
        echo "</script>";
        echo "<table style='background-color:white'>";
        echo "<tr class='results'><th colspan=3>Call</th><th rowspan=2>Note</th><th colspan=2>Callback</th><th rowspan=2>Action</th>";
		echo "</tr><tr class='results'><th>Date</th><th>User</th><th>Result</th><th>Date</th><th>User</th></tr>";
        
		if ($customer_id) $query = "select * from ace_rp_call_history where ".$ans." customer_id='".$customer_id."'";
//		else if ($phone) $query = "select * from ace_rp_call_history where ".$ans." customer_id in (select id from ace_rp_users where phone='".$phone."')";
		else if ($phone) $query = "select * from ace_rp_call_history where ".$ans." phone='".$phone."'";

        $query .= " order by call_date desc, call_time desc";
        
		$r = 1;
        $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
        $result = $db->_execute($query);
				while ($row = mysql_fetch_array($result,MYSQL_ASSOC))
		{
            echo "<tr id='" .$row['id'] ."' class='" ."cell".(++$r%2) ."'>";
            echo "<td>" .date('d-m-Y',strtotime($row['call_date'])) ."</td>";
            echo "<td>" .$users[$row['call_user_id']] ."</td>";
            echo "<td>" .$call_results[$row['call_result_id']] ."</td>";
        
            $action = 'return false;';
                
            $cb_note = '';
            $cb_date = '';
            if ((($this->Common->getLoggedUserRoleID() != 3)
         	&& ($this->Common->getLoggedUserRoleID() != 9))
         	|| (1*$this->Common->getLoggedUserID() == 1*$row['call_user_id'])) 
	        {
	        	$cb_note = $row['call_note'];
	          $cb_date = date('d-m-Y',strtotime($row['callback_date']));
            if (($row['dialer_id']!='web')&&($row['dialer_id']!=''))
                $action = "alert('This call was made from DIALER and can not be removed.');";
            else
                $action = "DeleteCallRecord(" .$row['id'] ."," .$row['customer_id'] .");";
	        }
            
            echo "<td><div style='width:150px'>" .$cb_note ."</div></td>";
            echo "<td>" .$cb_date ."</td>";
            echo "<td>" .$users[$row['callback_user_id']] ."</td>";
            echo "<td><img src='" .ROOT_URL . "/app/webroot/img/icon-vsm-delete.png' onclick=\"" .$action ."\"></td>";
            echo "</tr>";
			}
		echo "</table>";
        exit;
    }
	
    // Method deletes specified call record
    function deleteCallRecord()
    {
        $rec_id = $_GET['record_id'];
        $this->CallRecord->del($rec_id);
        echo 'Record deleted';
        exit;
    }
    
    //AJAX. Method shows the list of previous orders with a posibility to choose one
	  function getPreviousJobs()
    {
        $customer_id = $_GET['customer_id'];
        $phone = $_GET['phone'];
        $phone = preg_replace("/[- \.]/", "", $phone);
	    
        $txt_head = 'style="border-bottom:1px solid black;border-right:1px solid black;background-color:#999999"';
        $txt = 'style="border-bottom:1px solid black;border-right:1px solid black;"';
      
        $h = '
			<style type="text/css" media="all">
		   @import "'.ROOT_URL.'/app/webroot/css/style.css";
			</style>
			<script language="JavaScript" src="'.ROOT_URL.'/app/webroot/js/jquery.js"></script>
      <script language="JavaScript">
				function addItem(item_id,item_txt,item_tech1,item_tech2){
				  var new_item=new Array();
					new_item[0]=item_id;
					new_item[1]=item_tech1;
					new_item[2]=item_tech2;
					new_item[3]=item_txt;
					window.returnValue=new_item;
					window.close();
				}
				function highlightCurRow(element){
					$(".item_row").css("background","");
					$("#"+element).css("background","#a9f5fe");
				}
      </script>
      <div class="pricesubpage">
      <h3>Choose a previous job</h3>
      <table style="booked" cellspacing=0 colspacing=0>
      <tr>
        <th '.$txt_head.' width=100px>Date</th>
        <th '.$txt_head.' width=60px>REF #</th>
        <th '.$txt_head.' style="border-bottom:1px solid black" width=100px>Tech 1</th>
        <th '.$txt_head.' width=100px>Tech 2</th>
      </tr>';
        
        //Make Redo Orders List
        if ($customer_id)
            $past_orders = $this->Order->findAll(array('Order.customer_id'=> $customer_id), null, "job_date DESC", null, null, 1);
        else
            $past_orders = $this->Order->findAll(array('Customer.phone'=> $phone), null, "Order.job_date DESC", null, null, 1);
        
        foreach ($past_orders as $ord)
        {
          $tech1 = $ord['Technician1']['first_name'];
          if (!$tech1) $tech1 = $ord['Technician1']['last_name'];
          
          $tech2 = $ord['Technician2']['first_name'];
          if (!$tech2) $tech2 = $ord['Technician2']['last_name'];
          
				  $h .= '<tr class="item_row" id="item_'.$ord['Order']['id'].'" style="cursor:pointer;" onclick="addItem('.$ord['Order']['id'].',\'REF# '.$ord['Order']['order_number'].' - '.date('d M Y', strtotime($ord['Order']['job_date'])).'\',\''.$ord['Order']['job_technician1_id'].'\',\''.$ord['Order']['job_technician2_id'].'\')" onMouseOver="highlightCurRow(\'item_'.$ord['Order']['id'].'\')">';
					$h .= '<td '.$txt.'>&nbsp;'.date('d M Y', strtotime($ord['Order']['job_date'])).'</td>';
					$h .= '<td '.$txt.'>&nbsp;'.$ord['Order']['order_number'].'</td>';
					$h .= '<td '.$txt.'>&nbsp;'.$tech1.'</td>';
					$h .= '<td '.$txt.'>&nbsp;'.$tech2.'</td>';
					$h .= '</tr>';
        }
				$h .= '</table>
        </div>';
        
        echo $h;
        exit;
    }		
    
    //AJAX. Method returns the last order done for the customer
	  function getLastJob()
    {
        $customer_id = $_GET['customer_id'];
        $phone = $_GET['phone'];
        $phone = preg_replace("/[- \.]/", "", $phone);
	    
        //Make Redo Orders List
        if ($customer_id)
            $past_orders = $this->Order->findAll(array('Order.customer_id'=> $customer_id), null, "job_date DESC", null, null, 1);
        else
            $past_orders = $this->Order->findAll(array('Customer.phone'=> $phone), null, "Order.job_date DESC", null, null, 1);
        
        $ord = $past_orders[0];
        
				$aRet = array();
				$aRet['job_id'] = $ord['Order']['id'];
				$aRet['source1_id'] = $ord['Order']['job_technician1_id'];
				$aRet['source2_id'] = $ord['Order']['job_technician2_id'];
				$aRet['job_text'] = "REF# {$ord['Order']['order_number']} - ".date('d M Y', strtotime($ord['Order']['job_date']));
        
        echo json_encode($aRet);
        exit;
    }

    // Method renders the changes history into the table
    function getChangesHistory()
    {
        $customer_id = $_GET['customer_id'];
        $order_id = $_GET['order_id'];
 		echo "<table style='background-color:white'>";
		echo "<tr class='results'><th width=80px>Date</th><th width=60px>Time</th><th width=60px>User</th><th width=380px>Operation</th></tr>";

		$sql =  "select l.change_date, l.change_time, u.id,
                        concat(u.first_name,' ',u.last_name) name,
                        'changed' operation
                   from ace_rp_users_log l, ace_rp_users u
                  where l.change_user_id=u.id and l.id='" .$customer_id ."' 
                 group by l.change_date, l.change_time, u.id, concat(u.first_name,' ',u.last_name)
            union
            select l.change_date, l.change_time, u.id,
                        concat(u.first_name,' ',u.last_name) name,
                        'changed' operation
                   from ace_rp_orders_log l, ace_rp_users u
                  where l.change_user_id=u.id and l.id='" .$order_id ."' 
                 group by l.change_date, l.change_time, u.id, concat(u.first_name,' ',u.last_name)
                 order by 1 desc,2 desc";
		
		$r = 1;
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$result = $db->_execute($sql);
		while ($row = mysql_fetch_array($result))
		{
            echo "<tr class='" ."cell".(++$r%2) ."' style='height:25px'";
//            if ($row['operation']=='client changed')
            echo "onclick='ShowChangeDetails(\"CH_DT_".$r."\",".$customer_id.",\"".$order_id."\",".$row['id'].",\"".$row['change_date']."\",\"".$row['change_time']."\")'>";
//            elseif ($row['operation']=='job changed')
//                  echo "onclick='ShowJobChangeDetails(\"CH_DT_".$r."\",".$order_id.",".$row['id'].",\"".$row['change_date']."\",\"".$row['change_time']."\")'>";
            echo "<td align=center>" .date('d-m-Y',strtotime($row['change_date'])) ."</td>";
            echo "<td align=center>" .date('H:i', strtotime($row['change_time'])) ."</td>";
            echo "<td>" .$row['name'] ."</td>";
            echo "<td>" .$row['operation'] ."</td>";
            echo "</tr>";
            echo "<tr class='" ."cell".($r%2) ."'><td style='display:none' class='change_details' colspan=4 id='CH_DT_".$r."'></td></tr>";
		}
		echo "</table>";
        exit;
    }
    
    // Method renders the current changes details into the table
    function getChangesDetails()
    {
        $customer_id = $_GET['customer_id'];
        $order_id = $_GET['order_id'];
        $change_date = $_GET['change_date'];
        $change_time = $_GET['change_time'];
        $change_user_id = $_GET['change_user_id'];
 		
		echo "<table style='background-color:white'>";
		echo "<tr class='results'><th width=80px>Field</th><th width=150px>Was</th><th width=150px>Is</th></tr>";
       
		$sql =  "select * from ace_rp_users_log
                  where id='" .$customer_id ."'
                    and change_user_id='".$change_user_id."'                     
                    and change_date='".$change_date."'
                    and change_time='".$change_time."'";
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$result = $db->_execute($sql);
		$prev_row = mysql_fetch_array($result, MYSQL_ASSOC);

    if (!empty($prev_row))
    {
        $sql =  "select * from ace_rp_users_log
                      where id='" .$customer_id ."'
                        and change_user_id='".$change_user_id."'                     
                        and (change_date>'".$change_date."' 
                             or (change_date='".$change_date."'
                               and change_time>'".$change_time."'))
                order by change_date asc, change_time asc limit 1";
        
        $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
        $result = $db->_execute($sql);
        if (!$row = mysql_fetch_array($result, MYSQL_ASSOC))
        {
            $sql =  "select * from ace_rp_users where id='" .$customer_id ."'";        
            $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
            $result = $db->_execute($sql);
            $row = mysql_fetch_array($result, MYSQL_ASSOC);
        }
        
        foreach ($row as $f_nam => $f_val)
        {
            if (($f_nam!='role_id')&&($f_nam!='change_user_id')&&($f_nam!='change_date')
              &&($f_nam!='change_time')&&($f_nam!='opercode')&&($f_nam!='created')&&($f_nam!='modified'))
                if ($prev_row[$f_nam]!=$f_val)
                {
                echo "<tr class='cell0'>";
                echo "<td>" .$f_nam ."</td>";
                echo "<td>" .$prev_row[$f_nam] ."</td>";
                echo "<td>" .$f_val ."</td>";
                echo "</tr>";
                }
        }
    }
    
		$sql =  "select * from ace_rp_orders_log
                  where id='" .$order_id ."'
                    and change_user_id='".$change_user_id."'                     
                    and change_date='".$change_date."'
                    and change_time='".$change_time."'";
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$result = $db->_execute($sql);
		$prev_row = mysql_fetch_array($result, MYSQL_ASSOC);

    if (!empty($prev_row))
    {
        $sql =  "select * from ace_rp_orders_log
                      where id='" .$order_id ."'
                        and change_user_id='".$change_user_id."'                     
                        and (change_date>'".$change_date."' 
                             or (change_date='".$change_date."'
                               and change_time>'".$change_time."'))
                order by change_date asc, change_time asc limit 1";
        
        $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
        $result = $db->_execute($sql);
        if (!$row = mysql_fetch_array($result, MYSQL_ASSOC))
        {
            $sql =  "select * from ace_rp_orders where id='" .$order_id ."'";        
            $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
            $result = $db->_execute($sql);
            $row = mysql_fetch_array($result, MYSQL_ASSOC);
        }
        
        foreach ($row as $f_nam => $f_val)
        {
            if (($f_nam!='created')&&($f_nam!='modified')&&($f_nam!='created_by')
              &&($f_nam!='created_date')&&($f_nam!='modified_by')&&($f_nam!='modified_date')
              &&($f_nam!='change_user_id')&&($f_nam!='change_date')
              &&($f_nam!='change_time')&&($f_nam!='opercode'))
                if ($prev_row[$f_nam]!=$f_val)
                {
                echo "<tr class='cell0'>";
                echo "<td>" .$f_nam ."</td>";
                echo "<td>" .$prev_row[$f_nam] ."</td>";
                echo "<td>" .$f_val ."</td>";
                echo "</tr>";
                }
        }
    }
		echo "</table>";
        exit;
    }

	//Finds all future-dated orders that are of the same zone as the supplied postal code
	function ordersByArea()
	{
		$layout = 'inline';
		
		if ($this->params['url']['postal_code'] != '')
		{
			//Find Zone Number
			$zones = $this->Zone->findAll(array('postal_code' => substr($this->params['url']['postal_code'], 0, 3)));
			
			if (count($zones))
			{
				//Store the current zone data
				$this->set('cur_zone_name', $zones[0]['Zone']['zone_name']);
				$this->set('cur_zone_postal_code', $zones[0]['Zone']['postal_code']);
				$this->set('cur_zone_city', $zones[0]['Zone']['city']);
			
				//Find all Zone elements (postal codes) for the same number
				$zones = $this->Zone->findAll(array('zone_num' => $zones[0]['Zone']['zone_num']));
			}
		}
		
		for ($i = 0; $i < count($zones); $i++)
		{
			if ($query != "")
				$query .= " OR ";

			$query .=  "Customer.postal_code LIKE '" . $zones[$i]['Zone']['postal_code'] . "%'";
		}
		
		if ($query)
			$query = "(".$query.")";

		if (isset($this->params['url']['customer_id']))
			$query .= ' AND ace_rp_users.id != '.$this->params['url']['customer_id'];
		
		
		if( $query != '' ) {
			if ($query)
				$query .= " AND ";
			$query .= "(Order.job_date >= '".date('Y-m-d')."')";
			//print $query;
			$this->data['Zone'] = $zones;
			$this->data['Order'] = $this->Order->findAll($query,null,"Order.job_date DESC,Order.job_timeslot_id,Order.job_truck");	//, null, null, null, 1, 2);
			$this->set('postal_code', $this->params['url']['postal_code']);
			
			$withoutTimeslot = array();
			foreach( $this->data['Order'] as $o){
				if( $o['Timeslot']['id']  && $o['Order']['job_truck'] ) {
					$withoutTimeslot[$o['Order']['job_truck']] = $o['Timeslot']['id']; 
				}
			}
			//pr($withoutTimeslot);die();
			
			$this->set('timeslots', $this->HtmlAssist->table2array($this->Timeslot->findAll(), 'id', 'name'));
		} 
	}
  
	// Method performs a look up for the customer by given phone number.
	// Is called from the 'edit_booking' page, when a user enters the phone number.
	// Returns an array of all found clients in JSON.
	function phoneLookup(){
    $phone = $_GET['phone'];
    $phone = preg_replace("/[- \.]/", "", $phone);
   
		$sql = "SELECT *
              FROM ace_rp_users u
					   WHERE u.phone like '%" .$phone ."%'";
		
    $db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$result = $db->_execute($sql);
    $index = 1;
		while ($row = mysql_fetch_array($result))
		{
        $res[$index]['id'] = $row['id'];
        $res[$index]['first_name'] = $row['first_name'];
        $res[$index]['last_name'] = $row['last_name'];
        $res[$index]['phone'] = $row['phone'];
        $res[$index]['cell_phone'] = $row['cell_phone'];
        $res[$index]['city'] = $row['city'];
        $res[$index]['postal_code'] = $row['postal_code'];
        $res[$index]['email'] = $row['email'];
        $res[$index]['address'] = $row['address'];
		}

		print json_encode($res);
    exit;
  }
  
	// Method performs a look up for the supplier's info by given id.
	// Returns found data as an array in JSON.
	function getSupplierInfo()
	{
		$id = $_GET['id'];
		$res = $this->Lists->GetTableRow('ace_rp_suppliers','id='.$id);
			print json_encode($res);
		exit;
	}
  
  	function confirmations() {
		//Convert date from date picker to SQL format
		if ($this->params['url']['ffromdate'] != '')
			$this->params['url']['ffromdate'] = date("Y-m-d", strtotime($this->params['url']['ffromdate']));
		
		//Pick today's date if no date
		$fdate = ($this->params['url']['ffromdate'] != '' ? $this->params['url']['ffromdate']: date("Y-m-d") ) ;
		$weekday = date('w',strtotime($fdate));
		
		$sql = "
			SELECT o.id, o.order_number, u.id user_id, u.first_name, u.last_name
				,o.booking_date, u2.first_name booking_telemarketer_id, o.job_date
				,u3.first_name verified_by_id, o.verified_date, u.city
				,os.name substatus, ot.name order_type, o.order_status_id
			FROM ace_rp_users u
			LEFT JOIN ace_rp_orders o
			ON u.id = o.customer_id
			LEFT JOIN ace_rp_order_substatuses os
			ON o.order_substatus_id = os.id 
			LEFT JOIN ace_rp_order_types ot
			ON o.order_type_id = ot.id
			LEFT JOIN ace_rp_users u2
			ON o.booking_telemarketer_id = u2.id
			LEFT JOIN ace_rp_users u3
			ON o.verified_by_id = u3.id
			WHERE o.order_number IS NOT NULL
			AND o.booking_date = '".$this->Common->getMysqlDate($fdate)."'
			ORDER BY o.verified_by_id, u.city, o.job_date
		";
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$result = $db->_execute($sql);		
		
		$bookings = 0;
		$notConfirmed = 0;
		$confirmed = 0;
		$changed = 0;
		$answeringMachine = 0;
		$cancelled = 0;
		$done = 0;
		
		while ($row = mysql_fetch_array($result, MYSQL_ASSOC))
		{
			foreach ($row as $k => $v)			
			
			$cust_temp[$row['id']]['id']= $row['id'];
			$cust_temp[$row['id']]['order_number']= $row['order_number'];
			$cust_temp[$row['id']]['user_id']= $row['user_id'];
			$cust_temp[$row['id']]['first_name']= $row['first_name'];
			$cust_temp[$row['id']]['last_name']= $row['last_name'];
			$cust_temp[$row['id']]['booking_date']= $row['booking_date'];
			$cust_temp[$row['id']]['booking_telemarketer_id']= $row['booking_telemarketer_id'];
			$cust_temp[$row['id']]['job_date']= $row['job_date'];
			$cust_temp[$row['id']]['verified_by_id']= $row['verified_by_id'];
			$cust_temp[$row['id']]['verified_date']= $row['verified_date']==''?'':date("d M Y h:m:s", strtotime($row['verified_date']));
			$cust_temp[$row['id']]['city']= $row['city'];
			$cust_temp[$row['id']]['substatus']= $row['substatus'];
			$cust_temp[$row['id']]['order_type']= $row['order_type'];
			
			//add statistics
			$bookings++;
			if($row['substatus'] == 'Not Confirmed') $notConfirmed++;
			if($row['substatus'] == 'Answering Machine') $answeringMachine++;
			if($row['substatus'] == 'Confirmed') $confirmed++;
			if($row['substatus'] == 'Changed') $changed++;

		}
		
		$this->set('customers', $cust_temp);
		$this->set('fdate', date("d M Y", strtotime($fdate)));
		$this->set('ydate', date("d M Y", strtotime($fdate) - 24*60*60));
		$this->set('tdate', date("d M Y", strtotime($fdate) + 24*60*60));
		$this->set('bookings', $bookings);
		$this->set('notConfirmed', $notConfirmed);
		$this->set('answeringMachine', $answeringMachine);
		$this->set('confirmed', $confirmed);
		$this->set('changed', $changed);
	}
  
	function searchList()
	{
		$conditions = array();

		if ($_GET['sq_crit'] == 'phone')
		{
			$sq_str = preg_replace("/[- \.]/", "", $_GET['sq_str']);
			$sq_str = preg_replace("/([?])*/", "[-]*", $sq_str);
			//$conditions[$_GET['sq_crit']] = "REGEX '".$sq_str."'";
			$conditions['phone REGEXP '] = $sq_str;
		}
		else			
			$conditions[$_GET['sq_crit']] = "LIKE %".$_GET['sq_str']."%";

						
		if (($_GET['limit']=="undefined") || ($_GET['limit'] == ""))
			$limit = "0,100";
		else
			$limit = $_GET['limit'];
			
		if (($_GET['add']=="undefined") || ($_GET['add'] == ""))
			$add = 0;
		else
			$add = $_GET['add'];

		$sort = null;

		if ($_GET['sq_crit'] == 'phone')
		{
			$sql = "SELECT User.id, User.card_number, `User`.`first_name`, User.last_name,
				  User.postal_code, User.email, User.address, User.city, User.state,
				  User.phone, User.cell_phone, User.credit, User.created, User.modified,
				  User.telemarketer_id, '' callback_note, User.callresult,
				  User.callback_date, CAST(User.callback_time AS TIME) callback_time,
				  User.lastcall_date
			FROM ace_rp_users as User WHERE phone REGEXP '".$sq_str."' or cell_phone REGEXP '".$sq_str."' LIMIT ".$limit;
			$cust = $this->User->query($sql);
		}
		else if ($_GET['sq_crit'] == 'REF')
		{
			$sql = "SELECT o.id order_id, o.job_date,
				User.id, User.card_number, `User`.`first_name`, User.last_name,
				User.postal_code, User.email, User.address, User.city, User.state,
				User.phone, User.cell_phone, User.credit, User.created, User.modified, 
				User.telemarketer_id,  '' callback_note,User.callresult,
				User.callback_date, CAST(User.callback_time AS TIME) callback_time,
				User.lastcall_date
			FROM ace_rp_users as User, ace_rp_orders o
			 WHERE User.id=o.customer_id and o.order_number='".$_GET['sq_str']."'";
			$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
			$result = $db->_execute($sql);
			while ($row = mysql_fetch_array($result, MYSQL_ASSOC))
			{
				foreach ($row as $k => $v)
					$cust_temp['User'][$k] = $v;
                
				$cust_temp['User']['telemarketer_id']= $row['call_user_id'];
				$cust_temp['User']['callback_time']= date("H:i", strtotime($row['callback_time']));
				$cust_temp['Order']['job_date']= $row['job_date'];
				$cust_temp['Order']['id']= $row['order_id'];
				
				$cust[$row['id']] = $cust_temp;
			}
		}
		else if($_GET['sq_crit'] == 'callback_date')
		{
			$telem_clause = '';
			$telem_clause1 = '';
			if($this->Common->getLoggedUserID() != 44851) {
				$telem_clause = ' AND h.callback_user_id='.$this->Common->getLoggedUserID();
				$telem_clause1 = ' AND y.call_user_id='.$this->Common->getLoggedUserID();
			}
			
			$sql = "SELECT distinct
					 User.id, User.card_number, User.first_name, User.last_name,
					 User.postal_code, User.email, User.address, User.city, 
					 User.phone, User.cell_phone, 
					 h.call_user_id, h.call_note, h.call_result_id,
					 h.callback_date, h.callback_time,
				  if((h.callback_date=current_date())&&(TIME_TO_SEC(CAST(now() AS TIME))>= TIME_TO_SEC(CAST(h.callback_time AS TIME))-300),1,0) reminder_flag,
					 h.call_date
				FROM ace_rp_users AS User, ace_rp_call_history h
				WHERE  User.id=h.customer_id and
					 (h.call_result_id in (0,1,2,4) or h.call_result_id is null)
				  AND h.callback_date LIKE '%".$_GET['sq_str']."%' 
				  AND h.call_date <= h.callback_date
					 ".$telem_clause." 
					and not exists 
					(select * from ace_rp_call_history y 
					  where y.customer_id=h.customer_id ".$telem_clause1."
						and (y.call_date>h.call_date
						 or y.call_date=h.call_date and y.call_time>h.call_time))
						  order by reminder_flag desc, h.callback_date, h.callback_time asc
								LIMIT ".$limit;
			
			$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
			$result = $db->_execute($sql);
			while ($row = mysql_fetch_array($result, MYSQL_ASSOC))
			{
				foreach ($row as $k => $v)
					$cust_temp['User'][$k] = $v;
	
				$cust_temp['User']['telemarketer_id']= $row['call_user_id'];
				$cust_temp['User']['callback_note']= str_replace("'","`",str_replace("\"","`",$row['call_note']));
				$cust_temp['User']['callresult']= $row['call_result_id'];
				$cust_temp['User']['lastcall_date']= $row['call_date'];
				$cust_temp['User']['callback_time']= date("H:i", strtotime($row['callback_time']));
				
				$cust[$row['id']] = $cust_temp;
			}
		}
		else if (($_GET['sq_crit'] != 'booking_source_id') && ($_GET['sq_crit'] != 'order_type_id') && ($_GET['sq_crit'] != 'callback_date'))
		{
			$cust = $this->User->findAll($conditions, null, $sort, $limit);
		}
		else	//by source, order type
		{
			$cust = $this->Order->findAll($conditions, null, $sort, $limit);
			$i = 0;
			foreach ($ord as $order)
			{
				$cust[$i]['User'] = $order['Customer'];
				$cust[$i]['Order'] = $order['Order'];
				$i++;
			}
		}
			
		foreach ($cust as $cnt => $cur)
		{
			foreach ($cur['User'] as $k => $v)
				$cust[$cnt]['User'][$k] = str_replace("'","`",str_replace("\"","`",$v));
		}
		
		$this->set('cust', $cust);
		$this->set('add', $add);
		$this->set('curpage', $_GET['curpage']);
		$this->set('sq_crit', $_GET['sq_crit']);
		$this->set('sq_str', $_GET['sq_str']);
		$this->set('call_results', $this->HtmlAssist->table2array($this->CallResult->findAll(), 'id', 'name'));
		$this->set('Common', $this->Common);
	}
	
	function index()
	{
		//Get a list of all technicians
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);

        $this->set('allTechnician', $this->Lists->Technicians());
        $this->set('booking_sources', $this->Lists->BookingSources());
        $this->set('job_types', $this->HtmlAssist->table2array($this->OrderType->findAll(), 'id', 'name'));

		$sort = $_GET['sort'];
		$order = $_GET['order'];

		if ($this->params['url']['data[tech_id][]'] != '')
			$this->params['url']['tech_id'] = $this->params['url']['data[tech_id][]'];

		$SORT_ASC = '&nbsp;<span class="sortarrow">&Uacute;</span>';
		$SORT_DESC = '&nbsp;<span class="sortarrow">&Ugrave;</span>';

		$sqlOrder = '';
		$sqlSort = $sort;
		switch ( $order ) {
			case 'sdate' :
			$sqlOrder = 'Order.job_date';
			$this->set('sdate',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'sid' :
			$sqlOrder = 'Order.id';
			$this->set('sid',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'scity' :
			$sqlOrder = 'Customer.city';
			$this->set('scity',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'scrating' :
			$sqlOrder = 'Order.customer_rating';
			$this->set('scrating',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'sbookingby' :
			$sqlOrder = 'Telemarketer.last_name';
			$this->set('sbookingby',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'stech1' :
			$sqlOrder = 'Technician1.last_name';
			$this->set('stech1',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'stech2' :
			$sqlOrder = 'Technician2.last_name';
			$this->set('stech2',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'scommission' :
			$sqlOrder = '(WorkRecord1.commission+WorkRecord2.commission)';
			$this->set('scommission',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'sjobamount' :
			$sqlOrder = 'Order.customer_paid_amount';
			$this->set('sjobamount',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'sstatus' :
			$sqlOrder = 'Status.name';
			$this->set('sstatus',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			//Additions by Anton
			case 'scustomerlast' :
			$sqlOrder = 'Customer.last_name';
			$this->set('scustomerlast',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'scustomerfirst' :
			$sqlOrder = 'Customer.first_name';
			$this->set('scustomerfirst',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			default : 
			$sqlOrder = 'Order.job_date DESC, Order.job_time_beg';
			$sqlSort = 'ASC';
			break;
		}
		$sqlOrder .= ' '.$sqlSort;
			
		$conditions=array(); 
		$conditions_string = " WHERE 1=1";
		 
		if( $_GET['ffromdate'] != "" || $_GET['ftodate'] != ""  ) {
		  if( $_GET['ffromdate'] != "" && $_GET['ftodate'] != ""  ) {
			$conditions["Order.job_date"] = '>='.$this->Common->getMysqlDate($_GET['ffromdate']);
			$conditions["and"] = array("Order.job_date" => '<='.$this->Common->getMysqlDate($_GET['ftodate']));

			$conditions_string .= " AND (Order.job_date >='".$this->Common->getMysqlDate($_GET['ffromdate'])."' AND Order.job_date<='".$this->Common->getMysqlDate($_GET['ftodate'])."') ";
		  } else {
			  if( $_GET['ffromdate'] != "" ) {
				$conditions["Order.job_date"] = '>='.$this->Common->getMysqlDate($_GET['ffromdate']);
				$conditions_string .= " AND Order.job_date >='".$this->Common->getMysqlDate($_GET['ffromdate'])."' ";
				}
				if( $_GET['ftodate'] != "" ) {
				$conditions["Order.job_date"] = '<='.$this->Common->getMysqlDate($_GET['ftodate']);
				$conditions_string .= " AND Order.job_date <='".$this->Common->getMysqlDate($_GET['ftodate'])."' ";
				}
			}
		}

		if( $_GET['ffromdatebooking'] != "" || $_GET['ftodatebooking'] != ""  ) {
		  if( $_GET['ffromdatebooking'] != "" && $_GET['ftodatebooking'] != ""  ) {
			$conditions["Order.booking_date"] = '>='.$this->Common->getMysqlDate($_GET['ffromdatebooking']);
			$conditions["and"] = array("Order.booking_date" => '<='.$this->Common->getMysqlDate($_GET['ftodatebooking']));

			$conditions_string .= " AND (Order.booking_date >='".$this->Common->getMysqlDate($_GET['ffromdatebooking'])."' AND Order.booking_date<='".$this->Common->getMysqlDate($_GET['ftodatebooking'])."') ";
		  } else {
			  if( $_GET['ffromdatebooking'] != "" ) {
				$conditions["Order.booking_date"] = '>='.$this->Common->getMysqlDate($_GET['ffromdatebooking']);
				$conditions_string .= " AND Order.booking_date >='".$this->Common->getMysqlDate($_GET['ffromdatebooking'])."' ";
				}
				if( $_GET['ftodatebooking'] != "" ) {
				$conditions["Order.booking_date"] = '<='.$this->Common->getMysqlDate($_GET['ftodatebooking']);
				$conditions_string .= " AND Order.booking_date <='".$this->Common->getMysqlDate($_GET['ftodatebooking'])."' ";
				}
			}
		}
			
		if( $_GET['fname'] != "" ) {
			$conditions["CONCAT(Customer.first_name,' ',Customer.last_name)"] = "LIKE %". $_GET['fname']."%";
		  //$conditions["or"] = array("Customer.last_name" => "LIKE %". $_GET['fname']."%");
			$conditions_string .= " AND CONCAT(Customer.first_name,' ',Customer.last_name) LIKE'%".$_GET['fname']."%'";
		}
		if( $_GET['fphone'] != "" ) {
		  $conditions["Customer.phone"] = "LIKE %". $this->Common->preparePhone($_GET['fphone'])."%";
		  $conditions_string .= " AND Customer.phone LIKE'%".$this->Common->preparePhone($_GET['fphone'])."%'";
		}

		if( $_GET['faddress'] != "" ) {
		  $conditions["Customer.address"] =  "LIKE %". $_GET['faddress']."%";
		  $conditions_string .= " AND Customer.address LIKE'%".$_GET['faddress']."%'";
		}
		if( is_array($_GET['data']) && $_GET['data']['Order']['order_status_id'] != "" ) {
		  $conditions["Order.order_status_id"] =  "=". $_GET['data']['Order']['order_status_id'];
		  $conditions_string .= " AND Order.order_status_id=".$_GET['data']['Order']['order_status_id'];
		}
		elseif (($this->Common->getLoggedUserRoleID() == "3") ||($this->Common->getLoggedUserRoleID() == "9"))
		{
		  $conditions["Order.order_status_id"] =  array("1","5");
		  $conditions_string .= " AND Order.order_status_id in (1,5)";
		}
		if( $_GET['fsource_id'] != "" ) {
		  $conditions["Order.booking_source_id"] = "=". $_GET['fsource_id'];
		  $conditions_string .= " AND Order.booking_source_id=".$_GET['fsource_id'];
		}
		if( $_GET['forder_type_id'] != "" ) {
		  $conditions["Order.order_type_id"] =  $_GET['forder_type_id'];
		  $conditions_string .= " AND Order.order_type_id=".$_GET['forder_type_id'];
		}
		if( $_GET['teleuser_id'] != "" ) {
			$conditions["Order.booking_source_id"] =  $_GET['teleuser_id'];
			$conditions_string .= " AND Order.booking_source_id=".$_GET['teleuser_id'];
		}

		if( $_GET['booker_id'] != "" ) {
		  $conditions["Order.booking_telemarketer_id"] =  $_GET['booker_id'];
			$conditions_string .= " AND Order.booking_telemarketer_id=".$_GET['booker_id'];
		}
		if( $_GET['fordernumber'] != "" ) {
		  $conditions["Order.order_number"] = "LIKE %". $_GET['fordernumber']."%";
		  $conditions_string .= " AND Order.order_number='".$_GET['fordernumber']."'";
		}
		
		if (is_array($_GET['data']))
			$this->set('forder_status_id', $_GET['data']['Order']['order_status_id']);
		
		
		//Additions by Anton
		if (($this->Common->getLoggedUserRoleID() == "3") ||($this->Common->getLoggedUserRoleID() == "9"))
			$this->set('job_statuses', $this->HtmlAssist->table2array($this->OrderStatus->findAll(array("OrderStatus.id"=>array("1","5"))), 'id', 'name'));
		else
			$this->set('job_statuses', $this->HtmlAssist->table2array($this->OrderStatus->findAll(), 'id', 'name'));

		//Derived View - Show/Hide Fields
		if ($this->Common->getLoggedUserRoleID() == 3 || $this->Common->getLoggedUserRoleID() == 9
		          || $this->Common->getLoggedUserRoleID() == 13)
			$show_delete = 0;
		else
			$show_delete = 1;
		$this->set('show_delete', $show_delete);
		
		if ($this->Common->getLoggedUserRoleID() == 3 || $this->Common->getLoggedUserRoleID() == 9
		          || $this->Common->getLoggedUserRoleID() == 13)
			$show_edit = 0;
		else
			$show_edit = 1;
		$this->set('show_edit', $show_edit);

		$view_mode = $_GET['view_mode'];
		if ($view_mode == '')
			$view_mode = $_POST['view_mode'];
		$pp_view = $_GET['pp_view'];
		$pp_user_id = $_GET['pp_user_id'];

		if (!$view_mode)
			$view_mode = 'all';

		if ($view_mode == 'all')
		{
			$this->set('sm', '1');
			$this->set('subtitle', 'All Jobs & Bookings');
			//Filter Options to show
			$this->set('show_op_date', 1);
			$this->set('show_op_booking_date', 1);
			$this->set('show_op_payperiod', 0);
			$this->set('show_op_name', 1);
			$this->set('show_op_phoneaddress', 1);
			$this->set('show_op_status', 1);
			$this->set('op_action', 'edit');
			$this->set('show_op_source', 1);
			$this->set('show_op_booker', 1);
			$this->set('show_op_order_type', 1);
			$this->set('show_op_tech', 0);
			//Data to show
			$this->set('show_id', 1);
			$this->set('show_job_type', 1);
			$this->set('show_customer_last', 1);
			$this->set('show_customer_first', 1);
			$this->set('show_customer_address', 1);
			$this->set('show_customer_phone', 1);
			$this->set('show_customer_rating', 1);
			$this->set('show_bookedby', 1);
			$this->set('show_techs', 1);
			$this->set('show_hours_done', 0);
			$this->set('show_commission_1', 0);
			$this->set('show_commission_2', 0);
			$this->set('show_booking_amount', 1);
			if ($this->Common->getLoggedUserRoleID() != 3)
				$this->set('show_sales_amount', 1);
			$this->set('show_cancellation', 1);
			$this->set('show_office_note', 1);
			$this->set('show_status', 1);
			$this->set('show_actions', 1);
			$this->set('show_paid', 0);
			$this->set('show_source', 1);
			$this->set('show_total_amounts', 1);
		}
		else if ($view_mode == 'current_bookings')
		{
			$this->set('sm', '1');
			$this->set('subtitle', 'Current Bookings');
			//Conditions
			//status=booked
			$conditions["Order.order_status_id"] = '=1';
			$conditions_string .= " AND Order.order_status_id=1 ";
			//date = future
			$conditions["Order.job_date"] = '>='.date("Y-m-d"); //  H-m-s
			$conditions_string .= " AND Order.job_date>='".date("Y-m-d")."'";
			//Filter Options to show
			$this->set('show_op_date', 1);
			$this->set('show_op_payperiod', 0);
			$this->set('show_op_name', 1);
			$this->set('show_op_phoneaddress', 1);
			$this->set('show_op_status', 0);
			$this->set('op_action', 'edit');
			$this->set('show_op_tech', 0);
			//Data to show
			$this->set('show_id', 1);
			$this->set('show_customer_last', 1);
			$this->set('show_customer_first', 1);
			$this->set('show_customer_address', 1);
			$this->set('show_customer_phone', 1);
			$this->set('show_customer_rating', 0);
			$this->set('show_bookedby', 1);
			$this->set('show_techs', 1);
			$this->set('show_hours_done', 0);
			$this->set('show_commission_1', 0);
			$this->set('show_commission_2', 0);
			$this->set('show_booking_amount', 1);
			$this->set('show_sales_amount', 1);
			$this->set('show_cancellation', 0);
			$this->set('show_office_note', 1);
			$this->set('show_status', 1);
			$this->set('show_actions', 1);
			$this->set('show_paid', 0);
		}
		else if ($view_mode == 'requested_bookings')
		{
			$this->set('sm', '1');
			$this->set('subtitle', 'Incoming Bookings');
			//Conditions
			//status=6 customer request
			$conditions["Order.order_status_id"] = '=6';
			$conditions_string .= " AND Order.order_status_id=6 ";
			//Filter Options to show
			$this->set('show_op_date', 1);
			$this->set('show_op_payperiod', 0);
			$this->set('show_op_name', 1);
			$this->set('show_op_phoneaddress', 1);
			$this->set('show_op_status', 0);
			$this->set('op_action', 'edit');
			$this->set('show_op_tech', 0);
			//Data to show
			$this->set('show_id', 1);
			$this->set('show_customer_last', 1);
			$this->set('show_customer_first', 1);
			$this->set('show_customer_address', 0);
			$this->set('show_customer_phone', 1);
			$this->set('show_customer_rating', 0);
			$this->set('show_bookedby', 0);
			$this->set('show_techs', 0);
			$this->set('show_hours_done', 0);
			$this->set('show_commission_1', 0);
			$this->set('show_commission_2', 0);
			$this->set('show_booking_amount', 0);
			$this->set('show_sale_amount', 0);
			$this->set('show_cancellation', 0);
			$this->set('show_office_note', 0);
			$this->set('show_status', 0);
			$this->set('show_actions', 1);
			$this->set('show_paid', 0);
		}
		else if ($view_mode == 'current_day')
		{	
			$this->set('sm', '1');
			$this->set('subtitle', 'Today\'s Jobs');
			//Conditions
			//status=booked
			//$conditions["Order.order_status_id"] = '=1';
			$conditions["or"] = array("Order.order_status_id" => '=1', "Order.order_status_id" => '=5');
			$conditions_string .= " AND (Order.order_status_id=1 OR Order.order_status_id=5 )";
			//date=today
			$conditions["Order.job_date"] = '='.date("Y-m-d");
			$conditions_string .= " AND Order.job_date>='".date("Y-m-d")."'";
			//technician is the one logged in
			$conditions["or"] = array("Order.job_technician1_id" => '='.$_SESSION['user']['id'], "Order.job_technician2_id" => '='.$_SESSION['user']['id']);
			$conditions_string .= " AND (Order.job_technician1_id=".$_SESSION['user']['id']." OR Order.job_technician2_id=".$_SESSION['user']['id'].") ";
			//Filter Options to show
			$this->set('show_op_date', 0);
			$this->set('show_op_payperiod', 0);
			$this->set('show_op_name', 0);
			$this->set('show_op_phoneaddress', 0);
			$this->set('show_op_status', 0);
			$this->set('op_action', 'checkout');
			$this->set('show_op_tech', 0);
			//Data to show
			$this->set('show_id', 1);
			$this->set('show_customer_last', 1);
			$this->set('show_customer_first', 0);
			$this->set('show_customer_address', 1);
			$this->set('show_customer_phone', 0);
			$this->set('show_customer_rating', 0);
			$this->set('show_bookedby', 0);
			$this->set('show_techs', 0);
			$this->set('show_hours_done', 0);
			$this->set('show_commission_1', 0);
			$this->set('show_commission_2', 0);
			$this->set('show_booking_amount', 1);
			$this->set('show_sale_amount', 1);
			$this->set('show_cancellation', 0);
			$this->set('show_office_note', 1);
			$this->set('show_status', 1);
			$this->set('show_paid', 0);
			$this->set('show_timeslots', 1);
			$this->set('show_itemcategories', 1);
			$this->set('show_googlemap', 1);
			$this->set('show_substatus', 1);
			$this->set('show_actions', 1);
			
			$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
			$result = $db->_execute("SELECT id,name FROM `ace_rp_item_categories`");
			while ($row = mysql_fetch_array($result)) {
				$item_categories[$row['id']] = $row['name'];
			}
			$this->set('item_categories', $item_categories);
		}
		else if ($view_mode == 'pay_period')
		{
			if ($pp_user_id == "")
				if (($this->Common->getLoggedUserRoleID() == 1) || ($this->Common->getLoggedUserRoleID() == 2))
				{
					$_GET['tech_id'] = $_SESSION['user']['id'];
					$pp_user_id = $_SESSION['user']['id'];
				}
				elseif ( ($this->Common->getLoggedUserRoleID() == 6) && (isset($this->params['url']['tech_id'])) )
					$pp_user_id = $this->params['url']['tech_id'];
				elseif ( ($this->Common->getLoggedUserRoleID() == 6) && (isset($this->params['url']['closer_id'])) )
					$pp_user_id = $this->params['url']['closer_id'];

			$this->set('subtitle', 'Jobs Done To Date');

			if ($pp_view == 'technicians')
			{
				$this->set('sm', '8');
				$this->set('show_closer_commission', 1);
				$this->set('show_total_commission', 1);
				$this->set('show_total_amounts', 1);

				if (isset($pp_user_id) && ($pp_user_id != "")){
					$conditions["or"] = array("Order.job_technician1_id" => '='.$pp_user_id, "Order.job_technician2_id" => '='.$pp_user_id, "Order.booking_source_id" => '='.$pp_user_id, "Order.booking_closer_id" => '='.$pp_user_id);
					$conditions_string .= " AND (Order.job_technician1_id=".$pp_user_id." OR Order.job_technician2_id=".$pp_user_id." OR Order.booking_source_id=".$pp_user_id." OR Order.booking_closer_id=".$pp_user_id.") ";
				}
			}
			else if ($pp_view == 'telemarketers')
			{
				$this->set('sm', '9');
				$this->set('show_total_amounts', 1);
				$pp_user_id = $this->Common->getLoggedUserID();
				$conditions["Order.booking_source_id"] = '='.$pp_user_id;
				$conditions_string .= " AND Order.booking_source_id=".$pp_user_id;
			}
			else if ($pp_view == 'closers')
			{
				$this->set('sm', '9');
				$this->set('show_op_closer', 1);
				$this->set('show_total_commission', 1);
				$this->set('show_total_amounts', 1);

				if($pp_user_id == "") {$pp_user_id=0;}
				if (isset($pp_user_id)){
					$conditions["Order.booking_closer_id"] = '='.$pp_user_id;
					$conditions_string .= " AND Order.booking_closer_id=".$pp_user_id;
				}
			}

			//Filter Options to show
			$this->set('show_op_date', 1);
			$this->set('show_op_payperiod', 0);
			$this->set('show_op_name', 0);
			$this->set('show_op_phoneaddress', 0);
			$this->set('show_op_status', 1);
			$this->set('op_action', 'view');

			//Data to show
			$this->set('show_id', 1);
			$this->set('show_customer_last', 1);
			$this->set('show_customer_first', 0);
			$this->set('show_customer_address', 1);
			$this->set('show_customer_rating', 0);
			if ($pp_view == 'technicians')
			{
				if ($this->Common->getLoggedUserRoleID() == 6)
					$this->set('show_op_tech', 1);
				else
					$this->set('show_op_tech', 0);

				$this->set('show_techs', 1);
				$this->set('show_commission_1', 1);
				$this->set('show_commission_2', 1);
				$this->set('show_commission_booking', 1);
				$this->set('show_op_source', 0);
				$this->set('show_source', 0);
				$this->set('show_bookedby', 0);
				$this->set('show_sale_amount', 1);
			}
			else if ($pp_view == 'telemarketers')
			{
				$this->set('show_op_tech', 0);

				$this->set('show_techs', 0);
				$this->set('show_op_source', 1);
				$this->set('show_source', 1);
				//before we used bookedby, now we use source to get to telemarketer $this->set('show_bookedby', 1);
			}
			else if ($pp_view == 'closers')
			{
				$this->set('show_op_tech', 0);

				$this->set('show_techs', 0);
				$this->set('show_commission_closer', 1);
			}
			$this->set('show_hours_done', 0);
			$this->set('show_booking_amount', 1);
			$this->set('show_cancellation', 0);
			$this->set('show_status', 1);
			$this->set('show_actions', 0);
			$this->set('show_office_note', 1);
			//if (($_SESSION['user']['role_id'] == 4) || ($_SESSION['user']['role_id'] == 6))
			//	$this->set('show_paid', 1);
			//else
				$this->set('show_paid', 0);
		}else if ($view_mode == 'call_back')
		{
			$this->set('sm', '1');
			$this->set('subtitle', 'Call Back');
			$conditions["Order.order_status_id"] = '7';
			$conditions_string .= " AND Order.order_status_id=7";
			//Filter Options to show
			$this->set('show_op_date', 0);
			$this->set('show_op_payperiod', 0);
			$this->set('show_op_name', 1);
			$this->set('show_op_phoneaddress', 1);
			$this->set('show_op_status', 0);
			$this->set('op_action', 'edit');
			$this->set('show_op_tech', 0);
			//Data to show
			$this->set('show_id', 1);
			$this->set('show_customer_last', 1);
			$this->set('show_customer_first', 1);
			$this->set('show_customer_address', 1);
			$this->set('show_customer_rating', 0);
			$this->set('show_bookedby', 1);
			$this->set('show_techs', 1);
			$this->set('show_hours_done', 0);
			$this->set('show_commission_1', 0);
			$this->set('show_commission_2', 0);
			$this->set('show_booking_amount', 1);
			$this->set('show_sale_amount', 1);
			$this->set('show_cancellation', 0);
			$this->set('show_status', 1);
			$this->set('show_actions', 1);
			$this->set('show_paid', 0);
			$this->set('show_callback', 1);
		}
			
		if ($_GET['print'] == 1)
			$this->itemsToShow = 2000;

		//don't count old pages when doing a new search
		if ($_GET['newSearch'])
		{
			$_GET['newSearch']=0;
			$_GET['currentPage'] = 0;
			$_GET['paginationList1'] = '';
		}

		$this->Common->pagination($this->Order->findCount($conditions),$_GET['currentPage'],$this->itemsToShow,$this->pagesToDisplay);

		$pre_o =  $this->Order->findAll($conditions,'',$sqlOrder,$this->itemsToShow,$_GET['currentPage']+1,0);

		//Calculate totals for: current tech (if selected), booking amount, (sale amount)
		$total_comm = 0;
		$total_booking = 0;
		$total_sales = 0;
		
		//ADDED BY METODI
		//echo $conditions_string;
		if (($pp_view == "technicians") or ($pp_view == "telemarketers"))
		{
			//Booking  Commission
			$conditions_string_temp = $conditions_string;
			if ($pp_user_id != "")
			{
				$conditions_string = $conditions_string.' and `Order`.booking_source_id='.$pp_user_id;
			}
			$sql ='SELECT
					SUM(`WorkRecordSource`.commission), 
					`Order`.id	
				FROM ace_rp_orders AS `Order`
				LEFT JOIN ace_rp_work_records AS `WorkRecordSource` ON (`WorkRecordSource`.user_id=`Order`.booking_source_id AND `WorkRecordSource`.order_id = `Order`.id)
					'.$conditions_string_temp.
				' GROUP BY `Order`.id';		
			
			$result = $db->_execute($sql);
			while ($row = mysql_fetch_array($result)) {
				$total_comm += $row[0];
			}
		}
		//*********************************

		$db =& ConnectionManager::getDataSource($this->Order->useDbConfig);
		$sql = "SELECT
				      SUM(if(i.class=0,i.quantity*i.price-i.discount+i.addition,0)) as booking,
				      SUM(if(i.class=1,i.quantity*i.price-i.discount+i.addition,0)) as sales
				FROM `ace_rp_orders` AS `Order`
        LEFT JOIN ace_rp_order_items i on (`Order`.`id` = i.order_id)
				LEFT JOIN `ace_rp_users` AS `Customer` ON (`Order`.`customer_id` = `Customer`.`id`)
				".$conditions_string;

		//echo $sql;
		$result = $db->_execute($sql);
		while ($row = mysql_fetch_array($result)) {
			$total_booking = $row['booking'];
			$total_sales = $row['sales'];
		}

		//Added By Metodi :: 14.04.2010
		//Get Total Rows
		$db =& ConnectionManager::getDataSource($this->Order->useDbConfig);
		$sql = "SELECT
				      Count(*) as total_rows
				FROM `ace_rp_orders` AS `Order` ".$conditions_string;
		
		//echo '<br/>'.$sql;
		$result = $db->_execute($sql);
		while ($row = mysql_fetch_array($result)) {
			$total_rows =$row['total_rows'];
		}	
			
		$this->set('total_comm', $total_comm);
		$this->set('total_booking', $total_booking);
		$this->set('total_sales', $total_sales);
		$this->set('total_rows', $total_rows);
		$this->set('orders', $pre_o);
		$this->set('Common', $this->Common);
		$this->Order->id = 14;
	}
   
	// This is a method for the on-line booking proceeding.
	// We do not use it still
	function requestAppointment()
	{
		//save
		$this->data=$_REQUEST['data'];
		if( !empty($this->data) )
		{        
			//pr($this->data);die();
			
			$db =& ConnectionManager::getDataSource('default');
			
			$this->data['pcode'] = trim($this->data['pcode']) != '' ? $this->Common->prepareZip(trim($this->data['pcode'])):'';
			$this->data['phone'] = trim($this->data['phone']) != '' ? $this->Common->preparePhone(trim($this->data['phone'])) : '';
			
			// check customer exists
			$customerID = 0;
			$query = "select a.id 
						from ace_rp_users as a,ace_rp_users_roles as b 
					   where a.id = b.user_id AND b.role_id=8 and a.phone = '".trim($this->data['phone'])."'";
			$result = $db->_execute($query);
			if( $row = mysql_fetch_array($result) ) {
				// exist => update phone
				$customerID = $row['id'];
				$query = "update ace_rp_users
                     set first_name = '".($this->data['fname'])."',
                         last_name = '".($this->data['lname'])."',
                         address = '".($this->data['address'])."',
                         city = '".($this->data['city'])."',
                         postal_code = '".($this->data['pcode'])."'
                    where id = '".$customerID."'";
				$db->_execute($query);
			} else {
				// add new customer
				$query = "insert into ace_rp_users (first_name,last_name,postal_code,phone,address,city)
									values ('".trim($this->data['fname'])."','".trim($this->data['lname'])."',
                          '".trim($this->data['pcode'])."','".trim($this->data['phone'])."',
                          '".trim($this->data['address'])."','".trim($this->data['city'])."')";
				$db->_execute($query);
				$customerID = mysql_insert_id();
				$query = "insert into ace_rp_users_roles (user_id,role_id)
									values ('".$customerID."','8')";
				$db->_execute($query);
			}
			
			// save order
			$query = "insert into ace_rp_orders (`order_status_id`,`customer_id`,`job_notes_office`,job_date,booking_date, booking_source_id)
								values ('6','".$customerID."','".str_replace("'","`",$this->data['comment'])."','".date('Y-m-d',strtotime($this->data['date']))."',now(), 96043)";
			$db->_execute($query);
			$orderID = mysql_insert_id();
      
			//Send a message to Admins
			$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
			$sql = "INSERT INTO ace_rp_messages
					  (txt, state, from_user, from_date, 
					   to_user, to_date, to_time, file_link)
			   VALUES ('A new request from the web-site has been received', 0, 96043,
					  current_date(), 44885, current_date(), '00:00', ".$orderID.")";
			$db->_execute($sql);      
			$sql = "INSERT INTO ace_rp_messages
					  (txt, state, from_user, from_date, 
					   to_user, to_date, to_time, file_link)
			   VALUES ('A new request from the web-site has been received', 0, 96043,
					  current_date(), 44851, current_date(), '00:00', ".$orderID.")";
			$db->_execute($sql);
			$sql = "INSERT INTO ace_rp_messages
					  (txt, state, from_user, from_date, 
					   to_user, to_date, to_time, file_link)
			   VALUES ('A new request from the web-site has been received', 0, 96043,
					  current_date(), 57499, current_date(), '00:00', ".$orderID.")";
			$db->_execute($sql);
			
			$this->flash('Your request has been processed. Thank you!', '/orders/requestAppointment');
			exit();
		}
	}

	function scheduleView()
	{
		//$this->layout = 'frameless';
		$this->layout='edit';
		$p_code = strtoupper(substr($_REQUEST['p_code'],0,3));
		$city = $_REQUEST['city'];
		$neighbours = array();
		
		$db =& ConnectionManager::getDataSource('default');
		
		// Get neighbouring areas
		if ($p_code)
		{
			$neighbours[] = $p_code;
			$result = $db->_execute("select * from ace_rp_map where p_code='$p_code'");
			while($row = mysql_fetch_array($result))
			{
				$neighbours[] = $row['neighbour'];
				$city = $row['city'];
			}
		}
		elseif ($city)
		{
			$neighbours[] = $city;
			$result = $db->_execute("select * from ace_rp_map where city='$city'");
			while($row = mysql_fetch_array($result))
				$neighbours[] = $row['p_code'];
		}

		//Prepare Truck Names
		$map_reverse = array();
		$map_all = array();
		$trucks = array();
		$truck_colors = array();
		$truck_numbers = array();
		
		$route_type = $_REQUEST['route_type'];
		if (!$route_type)
			if (($this->Common->getLoggedUserRoleID()==1)&&($this->Common->getLoggedUserID()!=44884))
				$route_type = '2';
			elseif (($this->Common->getLoggedUserRoleID()!=6)&&($this->Common->getLoggedUserID()!=44884))
				$route_type = '1';
		
		$cond = '';
		if ($route_type) $cond = 'and route_type='.$route_type;
		
		$query = "select * from ace_rp_inventory_locations where type=2 $cond order by id asc";
		$result = $db->_execute($query);
		while($row = mysql_fetch_array($result)) {
			$trucks[$row['id']] = $row['name'];
			$truck_colors[$row['id']] = $row['color'];
			$truck_numbers[$row['id']] = $row['truck_number'];
			$map_all[$row['id']] = 'ALL';
			for ($i=8; $i<18; $i++)
				$map_reverse[$row['id']][$i][] = 'ALL';
		}

		//Prepare Technician Names
		if ($this->Common->getLoggedUserRoleID() != "1") $method = "editBooking"; else $method = "techBooking";
		$this->set('method',$method);
		$this->set('allTechnician',$this->Lists->Technicians(true));

		//Prepare substatus/confirmation names
		$substatuses = $this->Lists->ListTable('ace_rp_order_substatuses');

		//Prepare job types
		$jobtypes = $this->Lists->ListTable('ace_rp_order_types');
		
		//Convert date from date picker to SQL format
		if ($this->params['url']['ffromdate'] != '')
			$this->params['url']['ffromdate'] = date("Y-m-d", strtotime($this->params['url']['ffromdate']));
		
		//Pick today's date if no date
		$fdate = ($this->params['url']['ffromdate'] != '' ? $this->params['url']['ffromdate']: date("Y-m-d") ) ;
		$weekday = date('w',strtotime($fdate));
		
		//Prepare default techs' names	
		$default_techs = array();
		$query = "select i.id, i.tech1_day{$weekday}, t1.state t1_state, i.tech2_day{$weekday}, t2.state t2_state
                from ace_rp_inventory_locations i
                left outer join ace_rp_tech_schedule t1 on i.tech1_day{$weekday}=t1.tech_id 
                    and CAST(concat(t1.year,'-',t1.month,'-',t1.day) AS DATE)='".$fdate."'
                left outer join ace_rp_tech_schedule t2 on i.tech2_day{$weekday}=t2.tech_id
                    and CAST(concat(t2.year,'-',t2.month,'-',t2.day) AS DATE)='".$fdate."'
               where i.type=2";
		$result = $db->_execute($query);
		while($row = mysql_fetch_array($result)) {
			$default_techs[$row['id']] = array();
			$default_techs[$row['id']]['tech1_id'] = $row['tech1_day'.$weekday];
			$default_techs[$row['id']]['tech2_id'] = $row['tech2_day'.$weekday];
			$default_techs[$row['id']]['tech1_state'] = $row['t1_state'];
			$default_techs[$row['id']]['tech2_state'] = $row['t2_state'];
		}

		$sqlConditions = " AND a.job_date = '".$this->Common->getMysqlDate($fdate)."'"; //$this->params['url']['ffromdate']
		if ($route_type)
			$sqlConditions .= ' and a.job_truck in (select id from ace_rp_inventory_locations where route_type='.$route_type.') ';

		$orders = array();
		
		$status_condition = '';
		if ($this->Common->getLoggedUserRoleID() == "3"||$this->Common->getLoggedUserRoleID() == "9")
			$status_condition = ' and order_status_id!=3 ';
		
		$query = "SELECT a.id, a.order_status_id, a.order_substatus_id, a.job_truck,
						 a.sale_amount, a.job_timeslot_id, a.job_time_beg, a.job_time_end,
						 a.job_date, a.job_technician1_id, a.job_technician2_id, a.order_type_id,
						 a.sCancelReason, c.city as zone_city, c.postal_code as postal_code1,
						 c.color as color, a.booking_source_id as booking_source_id, s.first_name as booking_source_fn,
						 s.last_name as booking_source_ln, c.zone_name as zone_name, u.postal_code as postal_code,
						 u.address as address, u.state as state, u.phone as customer_phone,
						 concat(u.first_name,' ',u.last_name) as customer_name, u.city as user_city,
						 jt.name job_type_name, a.verified_by_id, rr.role_id, jt.category_id,
						 a.app_ordered_by, a.permit_result, a.order_number
					FROM `ace_rp_orders` as a
					LEFT JOIN `ace_rp_order_types` as jt on ( a.order_type_id = jt.id ) 
					LEFT JOIN `ace_rp_users` as u on ( a.customer_id = u.id ) 
					LEFT JOIN `ace_rp_users` as s on ( a.booking_source_id = s.id ) 
					LEFT JOIN `ace_rp_users` as t on ( a.booking_telemarketer_id = t.id ) 
					LEFT JOIN `ace_rp_users_roles` as rr on ( rr.user_id = t.id ) 
					LEFT JOIN `ace_rp_zones` as c on ( (LCASE(LEFT(a.job_postal_code,3)) = LCASE(LEFT(c.postal_code,3))) or (LCASE(c.city) LIKE LCASE(u.city)) )
				   WHERE order_status_id < 6 $status_condition $sqlConditions order by a.id asc";

		$redo = array();
		$followup = array();
		$install = array();
		$other = array();
		$result = $db->_execute($query);
		while($row = mysql_fetch_array($result))
		{
			foreach ($row as $k => $v)
			  $orders[$row['id']][$k] = $v;

			if ($row['order_type_id'] == 9) $redo[$row['order_status_id']][$row['id']] = 1;
			elseif ($row['order_type_id'] == 10) $followup[$row['order_status_id']][$row['id']] = 1;
			elseif ($row['category_id'] == 2) $install[$row['order_status_id']][$row['id']] = 1;
			else $other[$row['order_status_id']][$row['id']] = 1;
        
			$orders[$row['id']]['truck'] = $row['job_truck'];
			$orders[$row['id']]['city'] = (($row['user_city'] != "") ? $row['user_city'] : $row['zone_city']);

			for ($i = date('G', strtotime($row['job_time_beg'])); $i<date('G', strtotime($row['job_time_end'])); $i++)
			{
				unset($map_reverse[$row['job_truck']][$i]);
				unset($map_all[$row['job_truck']]);
				if (isset($map_reverse[$row['job_truck']][$i-1]))
				{
					$map_reverse[$row['job_truck']][$i-1][] = substr($row['postal_code'],0,3);
					$map_reverse[$row['job_truck']][$i-1][] = $orders[$row['id']]['city'];
				}
				if (isset($map_reverse[$row['job_truck']][$i+1]))
				{
					$map_reverse[$row['job_truck']][$i+1][] = substr($row['postal_code'],0,3);
					$map_reverse[$row['job_truck']][$i+1][] = $orders[$row['id']]['city'];
				}
			}
			
			//Check for the special marks
			if (($row['app_ordered_by']>0)||($row['category_id']!=2))
				$orders[$row['id']]['appliance_ordered'] = true;
			else
				$orders[$row['id']]['appliance_ordered'] = false;
        
			if (($row['order_status_id']!=5)||$row['permit_result']||($row['category_id']!=2))
				$orders[$row['id']]['permit_ordered'] = true;
			else
				$orders[$row['id']]['permit_ordered'] = false;
		}

		//Determine if all trucks use same techs
		foreach ($trucks as $truck_k => $truck_v)
		{
			$trucktech[$truck_k][0] = '';
			$trucktech[$truck_k][1] = '';
		}
    
		$flag1 = array();
		$flag2 = array();
		foreach ($orders as $order)
		{
			$truck_k = $order['truck'];
			
			if ($order['job_technician1_id']!=$trucktech[$truck_k][0])
			{
				if ($trucktech[$truck_k][0]||$flag1[$truck_k]) $trucktech[$truck_k][0] = '';
				else $trucktech[$truck_k][0] = $order['job_technician1_id'];
				$flag1[$truck_k] = true;
			}
				
				if ($order['job_technician2_id']!=$trucktech[$truck_k][1])
			{
				if ($trucktech[$truck_k][1]||$flag2[$truck_k]) $trucktech[$truck_k][1] = '';
				else $trucktech[$truck_k][1] = $order['job_technician2_id'];
				$flag2[$truck_k] = true;
			}
		}

		// Reverce the map
		$map = array();
		if ($city||$p_code)
			foreach ($map_reverse as $truck_k => $time_v)
			{
				foreach ($time_v as $time_k => $map_val)
				{
					foreach ($map_val as $val)
					{
						if (in_array($val, $neighbours))						
							$map[$time_k][] = $truck_k;
					}
				}
			}

		$this->set('norm_date', date("Y-m-d", strtotime($fdate)));		
		$this->set('fdate', date("d M Y", strtotime($fdate)));
		$this->set('ydate', date("d M Y", strtotime($fdate) - 24*60*60));
		$this->set('tdate', date("d M Y", strtotime($fdate) + 24*60*60));
		$this->set('trucks', $trucks);
		$this->set('default_techs', $default_techs);
		$this->set('truck_colors', $truck_colors);
		$this->set('truck_numbers', $truck_numbers);
		$this->set('substatuses', $substatuses);
		$this->set('jobtypes', $jobtypes);
		$this->set('orders', $orders);
		$this->set('trucktech', $trucktech);
		$this->set('allTypes', $this->Lists->ListTable('ace_rp_route_types'));
		$this->set('map', $map);
		$this->set('map_all', $map_all);
		$this->set('p_code', $p_code);
		$this->set('city', $city);
		$this->set('allCities', $this->Lists->ListTable('ace_rp_cities'));
	
		$redo = array('booked' => count($redo[1]),'done' => count($redo[5]),'canceled' => count($redo[3]));
		$followup = array('booked' => count($followup[1]),'done' => count($followup[5]),'canceled' => count($followup[3]));
		$install = array('booked' => count($install[1]),'done' => count($install[5]),'canceled' => count($install[3]));
		$other = array('booked' => count($other[1]),'done' => count($other[5]),'canceled' => count($other[3]));

		$this->set('redo', $redo);
		$this->set('followup', $followup);
		$this->set('install', $install);
		$this->set('other', $other);

		//Find Max and Min time
		$query = "SELECT MAX(`to`) as end, MIN(`from`) as beg FROM ace_rp_timeslots";
		$result = $db->_execute($query);
		if ($row = mysql_fetch_array($result))
		{
			$this->set('time_beg', $row['beg']);
			$this->set('time_end', $row['end']);
		}
	}
	
	function printEstimate()
  	{
		$conditions = array();

		if ($this->params['url']['id'])
			$conditions += array('`Order`.`id`' => $this->params['url']['id']);

		if ($this->params['url']['job_date'])
			$conditions += array('job_date' => $this->params['url']['job_date']);

		if ($this->params['url']['job_truck']){
			$conditions += array('job_truck' => $this->params['url']['job_truck']);

			//load truck and technicians
			//$inventoryLocations = $this->InventoryLocation->find(array('id' => $this->params['url']['job_truck']), null, null, null, null, 1);
			//$technicians = $this->User->findAll(array('is_active' => 1), null, null, null, null, 1);
		}
		
		$allStatuses = $this->Lists->ListTable('ace_rp_order_statuses');
		$allJobTypes = $this->Lists->ListTable('ace_rp_order_types');
		
		// UNCOMMENT ON LIVE
		$conditions += array('order_status_id' => array(1, 2, 5));

		//$orders = $this->Order->findAll($conditions, null, "job_truck ASC", null, null, 1);
		$orders = $this->Order->findAll($conditions, null, array("job_truck ASC", "job_time_beg ASC"), null, null, 1);
		
		$job_type = $orders[0]['Type']['id'];
		$questions = array();
		$db =& ConnectionManager::getDataSource('default');
		$query = "select * from ace_rp_order_types_questions
				where order_type_id=".$job_type." order by question_number asc";
		$result = $db->_execute($query);
		while($row = mysql_fetch_array($result))
		{
			$questions[$row['question_number']]['question_number'] = $row['question_number'];
			$questions[$row['question_number']]['question'] = $row['question'];
			$questions[$row['question_number']]['answers'] = $row['answers'];
		}
		$job_types = $this->Lists->ListTable('ace_rp_order_types');
		
		$this->set('job_truck', $this->params['url']['job_truck']);
		$this->set('job_type',$job_types[$job_type]);
		$this->set('job_type_id',$job_type);
		$this->set('questions',$questions);		
		$this->set('orders', $orders);
		$this->set('obj', $orders[0]);
		$this->set('allSources', $this->Lists->BookingSources());
		$this->set('job_trucks', $this->HtmlAssist->table2array($this->InventoryLocation->findAll(array('type' => '2'), null, null, null, 1, 0), 'id', 'name'));
		$this->set('payment_methods', $this->HtmlAssist->table2array($this->PaymentMethod->findAll(array(), null, null, null, 1, 0), 'id', 'name'));
	}

	//Method prints order[s]
	function printView()
  	{
		$conditions = array();

		if ($this->params['url']['id'])
			$conditions += array('`Order`.`id`' => $this->params['url']['id']);

		if ($this->params['url']['job_date'])
			$conditions += array('job_date' => $this->params['url']['job_date']);

		if ($this->params['url']['job_truck']){
			$conditions += array('job_truck' => $this->params['url']['job_truck']);

			//load truck and technicians
			//$inventoryLocations = $this->InventoryLocation->find(array('id' => $this->params['url']['job_truck']), null, null, null, null, 1);
			//$technicians = $this->User->findAll(array('is_active' => 1), null, null, null, null, 1);
		}
		
		$allQuestions = array();
		$db =& ConnectionManager::getDataSource('default');
		$result = $db->_execute("select * from ace_rp_order_types_questions");
		while($row = mysql_fetch_array($result))
		{
			$allQuestions[$row['order_type_id']][$row['question_number']]['question_number'] = $row['question_number'];
			$allQuestions[$row['order_type_id']][$row['question_number']]['question'] = $row['question'];
			$allQuestions[$row['order_type_id']][$row['question_number']]['local_answer'] = $row['local_answer'];
		}
		
		$allStatuses = $this->Lists->ListTable('ace_rp_order_statuses');
		$allJobTypes = $this->Lists->ListTable('ace_rp_order_types');
		
		// UNCOMMENT ON LIVE
		$conditions += array('order_status_id' => array(1, 5));

		//$orders = $this->Order->findAll($conditions, null, "job_truck ASC", null, null, 1);
		$orders = $this->Order->findAll($conditions, null, array("job_truck ASC", "job_time_beg ASC"), null, null, 1);
		
		// Customer's history for followup or complaints
		$num = 0;
		foreach ($orders as $obj)
		{
			if (($obj['Type']['id']==9)||($obj['Type']['id']==10))
			{
				$sRes = '';
				$order_id = $obj['Order']['id'];
				$phone = $obj['Customer']['phone'];				  
			
				$sRes .= '<table width=100% class="history">';
				$sRes .= '<tr>';
				$sRes .= '<th>Date</th><th>Booking</th><th>Status</th><th>Tech</th>';
				$sRes .= '</tr>';
			
				if ($phone)
				{
					$sq_str = preg_replace("/[- \.]/", "", $phone);
					$sq_str = preg_replace("/([?])*/", "[-]*", $phone);
					$past_orders = array();
					$query = "select * from ace_rp_orders where customer_phone regexp '$sq_str' order by job_date DESC";
			
					$result = $db->_execute($query);
					while($row = mysql_fetch_array($result))
						$past_orders[$row['id']] = $row['id'];
			
					foreach ($past_orders as $cur)
					{
						$p_order = $this->Order->findAll(array('Order.id'=> $cur), null, "job_date DESC", null, null, 1);
						$p_order = $p_order[0];
						if ($p_order['Order']['id'] == $order_id) continue;
						
						$items_text='';
						$total_booked=0;
						$total_extra=0;
						foreach ($p_order['BookingItem'] as $oi)
						{
							$str_sum = round($oi['quantity']*$oi['price']-$oi['discount']+$oi['addition'],2);
							if ($oi['class']==0)
							{
								$text = 'booked';
								$total_booked += 0+$str_sum;
							}
							else 
							{
								$text = 'sold by tech';
								$total_extra += 0+$str_sum;
							}
							
							$items_text .= '<tr>';
							$items_text .= '<td>'.$text.'</td>';
							$items_text .= '<td>'.$oi['name'].'</td>';
							$items_text .= '<td>'.$oi['quantity'].'</td>';
							$items_text .= '<td>'.$this->HtmlAssist->prPrice($oi['price']).'</td>';
							$items_text .= '<td>'.$this->HtmlAssist->prPrice($oi['addition']-$oi['discount']).'</td>';
							$items_text .= '</tr>';
						}
					
						$sRes .= "<tr class='orderline' valign='top' ".$add." >";
						$sRes .= "<td rowspan=1>".date('d-m-Y', strtotime($p_order['Order']['job_date']))."<br>REF#".$p_order['Order']['order_number']."</td>";
						$sRes .= "<td rowspan=1>".$this->HtmlAssist->prPrice($total_booked)."</td>";
						$status = $p_order['Order']['order_status_id'];
						$color="";
						$sRes .= "<td><b>".$allStatuses[$status]."</b><br/>";
						$sRes .= $allJobTypes[$p_order['Order']['order_type_id']]."</td>";
						$sRes .= "<td>".$p_order['Technician1']['first_name']."<br/>"
								  .$p_order['Technician2']['first_name']."</td>";
						$sRes .= "</tr>\n";
						$sRes .= "<tr valign='top'>";
						$sRes .= "<td colspan=4 style='border-bottom: 1px solid #AAAAAA;'>";
						$sRes .= '<table>';
						$sRes .= '<tr><th style="width:100px !important;">&nbsp;</th>';
						$sRes .= '<th style="text-align:left;width:250px !important;">Item</th>';
						$sRes .= '<th style="text-align:left;width:80px !important;">Qty</th>';
						$sRes .= '<th style="text-align:left;width:100px !important;">Price</th>';
						$sRes .= '<th style="text-align:left;">Adj</th></tr>';
						$sRes .= $items_text;
						$sRes .= '</table>';
						$sRes .= "</td>";
						$sRes .= "</tr>\n";
					}
					
					$sRes .= "</table>";
				}
				
				$orders[$num]['Order']['history']  = $sRes;
			}
			$num++;
		}

		$this->set('job_truck', $this->params['url']['job_truck']);
		//$this->set('inventoryLocations',$inventoryLocations);
		$this->set('orders', $orders);
		$this->set('allSources', $this->Lists->BookingSources());
		$this->set('suppliers', $this->Lists->ListTable('ace_rp_suppliers','',array('name','address')));
		$this->set('job_trucks', $this->HtmlAssist->table2array($this->InventoryLocation->findAll(array('type' => '2'), null, null, null, 1, 0), 'id', 'name'));
		$this->set('techs', $this->Lists->Technicians());
		$this->set('payment_methods', $this->HtmlAssist->table2array($this->PaymentMethod->findAll(array(), null, null, null, 1, 0), 'id', 'name'));
		$this->set('allQuestions', $allQuestions);
	}
	
	//Method prints blank order
	function printBlank()
 	{
		$job_type = $_GET['job_type'];
    $questions = array();
		$db =& ConnectionManager::getDataSource('default');
		$query = "select * from ace_rp_order_types_questions
                where order_type_id=".$job_type." order by question_number asc";
		$result = $db->_execute($query);
		while($row = mysql_fetch_array($result))
    {
			$questions[$row['question_number']]['question_number'] = $row['question_number'];
			$questions[$row['question_number']]['question'] = $row['question'];
			$questions[$row['question_number']]['answers'] = $row['answers'];
    }
    $job_types = $this->Lists->ListTable('ace_rp_order_types');
		$this->set('job_type',$job_types[$job_type]);
		$this->set('job_type_id',$job_type);
		$this->set('questions',$questions);
 	}

	// This method is for matrix printing. No differences from the printView 
	function printViewNew() {
		$conditions = array();

		if ($this->params['url']['id'])
			$conditions += array('`Order`.`id`' => $this->params['url']['id']);

		if ($this->params['url']['job_date'])
			$conditions += array('job_date' => $this->params['url']['job_date']);

		if ($this->params['url']['job_truck']){
			$conditions += array('job_truck' => $this->params['url']['job_truck']);

			//load truck and technicians
			$inventoryLocations = $this->InventoryLocation->find(array('id' => $this->params['url']['job_truck']), null, null, null, null, 1);
			//$technicians = $this->User->findAll(array('is_active' => 1), null, null, null, null, 1);
		}
		
		// UNCOMMENT ON LIVE
		$conditions += array('order_status_id' => array(1, 2, 5));

		//$orders = $this->Order->findAll($conditions, null, "job_truck ASC", null, null, 1);
		$orders = $this->Order->findAll($conditions, null, "job_time_beg ASC", null, null, 1);

		$workConditions = array();
		$workConditions += array('WorkRecord.order_id' => $this->params['url']['id']);
		$workRecords = $this->Order->WorkRecord->findAll($workConditions,null, array("WorkRecord.id desc")); //order by last added
		//var_dump($workRecords);
		
		$settings = $this->Setting->find(array('title'=>'tax_1'));
		$this->set('tax_1', $settings['Setting']['valuetxt']);

		$this->set('job_truck', $this->params['url']['job_truck']);
		$this->set('inventoryLocations',$inventoryLocations);
		$this->set('orders', $orders);
		$this->set('workrecords', $workRecords);
		$this->set('job_trucks', $this->HtmlAssist->table2array($this->InventoryLocation->findAll(array('type' => '2'), null, null, null, 1, 0), 'id', 'name'));
	}
	
	/*function emailCustomerBooking($id)
	{
		//Get E-mail Settings
		$settings = $this->Setting->find(array('title'=>'email_fromaddress'));
		$from_address = $settings['Setting']['valuetxt'];
		
		$settings = $this->Setting->find(array('title'=>'email_fromname'));
		$from_name = $settings['Setting']['valuetxt'];

		$settings = $this->Setting->find(array('title'=>'email_template_bookingnotification'));
		$template = $settings['Setting']['valuetxt'];

		$settings = $this->Setting->find(array('title'=>'email_template_jobnotification_subject'));
		$template_subject = $settings['Setting']['valuetxt'];

		//define the headers we want passed. Note that they are separated with \r\n
		//$headers = "From: webmaster@example.com\r\nReply-To: webmaster@example.com";
		$headers = "From: acecare.ca\n";
		//add boundary string and mime type specification
		$headers .= "Content-Type: text/html; charset=iso-8859-1\n" ;

		//Search for customers that need to be notified
		$conditions = array();
		$conditions += array('Order.id' => $id);

		$obj = $this->Order->find($conditions, null, null, null, null, 1);
		

		if ($obj['Order']['order_status_id'] != 1)
			return;

		//Booking Summary
		$summary = $this->HtmlAssist->tableOrderItemsPlain($obj,'BookingItem');

		if (count($obj['BookingCoupon']) > 0)
			$summary .= "\nDiscounts:\n".$this->HtmlAssist->tableOrderItemsPlain($obj,'BookingCoupon');

		$summary .= "\nTotal55: ".$this->HtmlAssist->prPrice($obj['Order']['booking_amount']);

		//Added By Metodi: 2010-02-02
		//Find booking source
		$conditions_temp = array();
		$conditions_temp += array('User.id' => $obj['Order']['booking_source_id']);
		$obj_temp = $this->User->find($conditions_temp, null, null, null, null, 1);
		//*******************
		
		$msg = $template;
		$msg = str_replace('{source}', $obj_temp['User']['first_name'].' '.$obj_temp['User']['last_name'], $msg);
		$msg = str_replace('{first_name}', $obj['Customer']['first_name'], $msg);
		$msg = str_replace('{last_name}', $obj['Customer']['last_name'], $msg);
		$msg = str_replace('{address}', $obj['Customer']['address'], $msg);
		$msg = str_replace('{city}', $obj['Customer']['city'], $msg);
		$msg = str_replace('{phone}', $obj['Customer']['phone'], $msg);
		$msg = str_replace('{cell_phone}', $obj['Customer']['cell_phone'], $msg);
		$msg = str_replace('{ref_number}', $obj['Order']['order_number'], $msg);
		$msg = str_replace('{job_date}', date("d M Y", strtotime($obj['Order']['job_date'])), $msg);
		$msg = str_replace('{job_timeslot}', date('ga', strtotime($obj['Order']['job_time_beg'])).' - '.date('ga', strtotime($obj['Order']['job_time_end'])), $msg);
		$msg = str_replace('{booking_summary}', $summary, $msg);
		$res = mail($obj['Customer']['email'], $template_subject, $msg, $headers);
	}*/
	
	function emailCustomerBooking($id)
	{
		//Get E-mail Settings
		$settings = $this->Setting->find(array('title'=>'email_fromaddress'));
		$from_address = $settings['Setting']['valuetxt'];
		
		$settings = $this->Setting->find(array('title'=>'email_fromname'));
		$from_name = $settings['Setting']['valuetxt'];

		$settings = $this->Setting->find(array('title'=>'email_template_bookingnotification'));
		$template = $settings['Setting']['valuetxt'];

		$settings = $this->Setting->find(array('title'=>'email_template_jobnotification_subject'));
		$template_subject = $settings['Setting']['valuetxt'];

		//define the headers we want passed. Note that they are separated with \r\n
		//$headers = "From: webmaster@example.com\r\nReply-To: webmaster@example.com";
		$headers = "From: acecare.ca\n";
		//add boundary string and mime type specification
		$headers .= "Content-Type: text/html; charset=iso-8859-1\n" ;

		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$query = "
			SELECT CONCAT(u2.first_name, \" \", u2.last_name) source, 
				u.first_name, u.last_name, u.email, u.phone, u.cell_phone, u.address, u.city, u.email, 
				o.order_number, 
				DATE_FORMAT(o.job_date, '%M %D, %Y') job_date, 
				DATE_FORMAT(o.job_time_beg, '%r') job_time_beg, 
				DATE_FORMAT(o.job_time_end, '%r') job_time_end
			FROM ace_rp_orders o
			LEFT JOIN ace_rp_users u
			ON o.customer_id = u.id
			LEFT JOIN ace_rp_users u2
			ON o.booking_source_id = u2.id
			WHERE o.id = '$id'
		";
		$result = $db->_execute($query);			
		while ($row = mysql_fetch_array($result)) {
			$source = $row['source'];
			$refnumber = $row['order_number'];
			$jobdate = $row['job_date'];
			$jobtimeslot = $row['job_time_beg'] . " to " . $row['job_time_end'];
			$phone = $row['phone'];
			$cellphone = $row['cell_phone'];
			$address = $row['address'];
			$city = $row['city'];
			$firstname = $row['first_name'];
			$lastname = $row['last_name'];
			$email = $row['email'];
		}

		$query = "
			SELECT oi.order_id, i.name, oi.quantity, oi.price, oi.discount, oi.price - oi.discount total
			FROM ace_rp_order_items oi
			LEFT JOIN ace_rp_items i
			ON oi.item_id = i.id
			WHERE oi.order_id = '$id'
		";
		$result = $db->_execute($query);			
		while ($row = mysql_fetch_array($result)) {
			$summary .= "<tr>";
			$summary .= "<td>" . $row['name'] . "</td>";
			$summary .= "<td>" . $row['quantity'] . "</td>";
			$summary .= "<td>" . $row['price'] . "</td>";
			$summary .= "<td>" . $row['discount'] . "</td>";
			$summary .= "<td>" . $row['total'] . "</td>";
			$summary .= "</tr>";			
		}
		
		$query = "
			SELECT SUM(price - discount) grandtotal 
			FROM ace_rp_order_items
			WHERE order_id = '$id'
		";
		$result = $db->_execute($query);			
		while ($row = mysql_fetch_array($result)) {
			$summary .= "<tr>";
			$summary .= "<td colspan='4' align='right'>Total Amount</td>";			
			$summary .= "<td>" . $row['grandtotal'] . "</td>";
			$summary .= "</tr>";			
		}
		
		
		$msg = $template;
		$msg = str_replace('{source}', $source, $msg);
		$msg = str_replace('{first_name}', $firstname, $msg);
		$msg = str_replace('{last_name}', $lastname, $msg);
		$msg = str_replace('{address}', $address, $msg);
		$msg = str_replace('{city}', $city, $msg);
		$msg = str_replace('{phone}', $phone, $msg);
		$msg = str_replace('{cell_phone}', $cellphone, $msg);
		$msg = str_replace('{ref_number}', $refnumber, $msg);
		$msg = str_replace('{job_date}', $jobdate, $msg);
		$msg = str_replace('{job_timeslot}', $jobtimeslot, $msg);
		$msg = str_replace('{booking_summary}', $summary, $msg);
		$res = mail($email, $template_subject, $msg, $headers);
	}

	function emailNotifications()
  {
		//Get E-mail Settings
		$settings = $this->Setting->find(array('title'=>'email_fromaddress'));
		$from_address = $settings['Setting']['valuetxt'];
		
		$settings = $this->Setting->find(array('title'=>'email_fromname'));
		$from_name = $settings['Setting']['valuetxt'];

		$settings = $this->Setting->find(array('title'=>'email_template_jobnotification'));
		$template = $settings['Setting']['valuetxt'];

		$settings = $this->Setting->find(array('title'=>'email_template_jobnotification_subject'));
		$template_subject = $settings['Setting']['valuetxt'];

		//Search for customers that need to be notified
		$conditions = array();

		$conditions += array('LENGTH(Customer.email)' => '> 0');
		$conditions += array('notified_booking' => '<> 1');
		$conditions += array('order_status_id' => 1);
		$conditions += array('order_substatus_id' => 1);
		$conditions += array('job_date' => '<'.date("Y-m-d", time() + 2*24*60*60));	//make it check for e-mails coming in 2 days or sooner with no notifications sent

		$orders = $this->Order->findAll($conditions, null, null, null, null, 1);


		$updates = array();
		foreach ($orders as $obj)
		{
			//print "Order:".$obj['Order']['id']." - ".$obj['Order']['job_date']." - ".$obj['Customer']['email']." - "."http://".$_ENV['SERVER_NAME'].BASE_URL.'/orders/confirm?a='.$obj['Order']['id'].'&b='.$obj['Customer']['id']."<br/>";
			$msg = $template;
			$msg = str_replace('{first_name}', $obj['Customer']['first_name'], $msg);
			$msg = str_replace('{last_name}', $obj['Customer']['last_name'], $msg);
			$msg = str_replace('{job_date}', date("d M Y", strtotime($obj['Order']['job_date'])), $msg);
			$msg = str_replace('{job_timeslot}', date('ga', strtotime($obj['Order']['job_time_beg'])).' - '.date('ga', strtotime($obj['Order']['job_time_end'])), $msg);
			$msg = str_replace('{url_confirm}', "http://".$_ENV['SERVER_NAME'].BASE_URL.'/orders/confirm?a='.$obj['Order']['id'].'&b='.$obj['Customer']['id'], $msg);

			$res = mail($obj['Customer']['email'], $template_subject, $msg, "From: ".$from_address);	//\"".$from_name."\"

			$updates[count($updates)] = "UPDATE ace_rp_orders SET notified_booking = 1 WHERE id = ".$obj['Order']['id']."\n";
		}

		//Set orders as 'customer notified'
		foreach ($updates as $update)
		{
			$db =& ConnectionManager::getDataSource($this->Order->useDbConfig);
			$db->_execute($update);
		}
		//print "<pre>".$updates."</pre>";;
	}

	function setTechnicians()
	{
    $tech_num = $_GET['tech_num'];
    $tech_id = $_GET['tech_id'];
    $Truck = $_GET['job_truck'];
    
    if ($tech_id)
    {
      $sql = "update ace_rp_orders set job_technician1_id=0
            WHERE order_status_id!=3 and job_truck is not null
              and job_technician1_id=".$tech_id."
              and job_truck!=".$Truck." and job_date='".$_GET['job_date']."'";
      $this->Order->query($sql);
      $sql = "update ace_rp_orders set job_technician2_id=0
            WHERE order_status_id!=3 and job_truck is not null
              and job_technician2_id=".$tech_id."
              and job_truck!=".$Truck." and job_date='".$_GET['job_date']."'";
      $this->Order->query($sql);
    }
      
    $sql = "UPDATE ace_rp_orders SET job_technician{$tech_num}_id=".($tech_id ? $tech_id : "NULL")
        ." WHERE job_truck=".$Truck." AND job_date='".$_GET['job_date']."'";
    $res = $this->Order->query($sql);

		$this->redirect($_GET['rurl']);
	}

	function confirm()
  {
		if (($_GET['a'] == '') || ($_GET['b'] == ''))
			return;

		$conditions = array();
		$conditions += array('Order.id' => $_GET['a']);
		$fnd = 0;
		$orders = $this->Order->findAll($conditions, null, null, null, null, 1);
		foreach ($orders as $obj)
		{
			if ($obj['Customer']['id'] == $_GET['b'])
				$fnd = 1;
		}

		if ($fnd)
		{
			$updates = "UPDATE ace_rp_orders SET order_substatus_id = 2 WHERE id = ".$_GET['a']."\n";
			$db =& ConnectionManager::getDataSource($this->Order->useDbConfig);
			$res = $db->_execute($updates);

			if ($res)
				print "Thank you. Your request has been processed.";
			else
				print "Thank you. However, there has been a problem processing your request.";
		}
	}
		
	function pickTechnician()
  {
		if (($this->params['url']['order_date'] != '') && ($this->params['url']['data']['technician_id'][0] != ''))
		{
			//Convert date from date picker to SQL format
			$this->params['url']['order_date'] = date("Y-m-d", strtotime($this->params['url']['order_date']));
			
			$this->redirect('/orders/dayendCheckout?order_date=' . $this->params['url']['order_date'] . '&technician_id=' . $this->params['url']['data']['technician_id'][0]);
		}
			
		//Pick today's date if no date
		$order_date = ($this->params['url']['order_date'] != '' ? $this->params['url']['order_date']: date("Y-m-d"));
		$this->set('order_date', date("d M Y", strtotime($order_date)));

		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$result = $db->_execute("
		SELECT a.id,CONCAT(a.first_name,' ',a.last_name) as name 
		FROM ace_rp_users as a,ace_rp_users_roles as b
		WHERE a.is_active=1 AND a.id = b.user_id and b.role_id in (1) 
		ORDER BY name");
		while ($row = mysql_fetch_array($result)) {
			$techs[$row['id']] = $row['name'];
		}
		$this->set('allTechnician',$techs);
	}
	
	function reschedule(){
		$order_id = $this->params['url']['order_id'];
		if ($order_id)
		{
			$this->Order->id = $order_id;
			$o = $this->Order->read();
			$o['Order']['order_status_id'] = 2; //reschedule
			$this->Order->save($o);
			
			// new order: a copy of the old one as all values are kept
			$o['Order']['id'] = 0;
			$o['Order']['order_status_id'] = 1; //booked
			$this->Order->save($o);
			$orig_order_id = $order_id;
			$order_id = $this->Order->getLastInsertId();
			
			//Now copy the order items
			$oi = $this->OrderItem->findAll(array('OrderItem.order_id' => $orig_order_id));
			for ($i=0; $i < count($oi); $i++)
			{
				$oi[$i]['OrderItem']['id'] = null;
				$oi[$i]['OrderItem']['order_id'] = $order_id;
				$this->OrderItem->save($oi[$i]['OrderItem']);
			}
		}
		
		$this->redirect('/orders/editBooking?order_id=' . $order_id . '&reschedule=1');
	}
	
	function cancel() {
		$order_id = $this->params['url']['order_id'];
		
		if ($order_id)
		{
			$this->Order->id = $order_id;
			$o = $this->Order->read();
			$o['Order']['order_status_id'] = 3; //cancel
			$this->Order->save($o);
		}
		
		$this->redirect('/orders/editBooking?order_id=' . $order_id);
	}
	
	function followup() {
		$order_id =  $this->params['url']['order_id'] != '' ? $this->params['url']['order_id'] : $this->params['form']['order_id'];
		$this->set('order_id', $order_id);
				
		if( $this->params['form']['action'] == 'save' ) {
			if( $this->params['form']['dosave'] == '1' ) {
				//Acquire old order
				$this->Order->id = $order_id;
				$p = $this->Order->read();
				
				$this->Order->id = 0;
				$o = $this->Order->read();
				$o['Order']['job_date'] = $this->params['form']['date'];
				$o['Order']['job_notes_technician'] = $this->params['form']['note'];
				$o['Order']['order_type_id'] = 2;
				$o['Order']['order_status_id'] = 1;
				$o['Order']['job_reference_id'] = $order_id;
				
				//Carried over values
				$o['Order']['job_technician1_id'] = $p['Order']['job_technician1_id'];
				$o['Order']['job_technician2_id'] = $p['Order']['job_technician2_id'];
				$o['Order']['customer_id'] = $p['Order']['customer_id'];
				$this->Order->save($o);
			}
			if ($this->data['rurl'][0])
				$this->redirect($this->data['rurl'][0]);
			else
				$this->redirect('/orders/jobCheckout?order_id=' . $order_id);
			exit();
		}
	}
	
	function delOrder($order_id, $nr = false)
	{
		if (!$order_id)
			$order_id = $this->params['url']['order_id'];

		$this->Order->delete($order_id, true);

		//if NR=no redirect then quit here
		if ($nr)
			return;
			
		if ($this->data['rurl'][0])
			$this->redirect($this->params['url']['rurl']);
		else
			$this->redirect('/orders/');
				
	}

	function sendMail()
	{
		if (isset($this->params['url']['message']))
		{
			//Get E-mail Settings
			$settings = $this->Setting->find(array('title'=>'email_fromaddress'));
			$from_address = $settings['Setting']['valuetxt'];
		
			$settings = $this->Setting->find(array('title'=>'email_fromname'));
			$from_name = $settings['Setting']['valuetxt'];

			$res = mail($this->params['url']['email'], $this->params['url']['subject'], $this->params['url']['message'], "From: ".$from_address);

			$this->set('hide_form', "display: none;");
		}
		else
			$this->set('hide_conf', "display: none;");

		$this->set('email', $this->params['url']['email']);
		$this->set('text', $this->params['url']['text']);
	}

	//Method checks for orders in the same timeslot
	function conflictCheck()
	{
		$job_date = $_GET['job_date'];
		$job_truck = $_GET['job_truck'];
		$job_from = $_GET['job_from'];
		$job_to = $_GET['job_to'];
		$order_id = $_GET['order_id'];

	    $query = " select count(*) cnt from ace_rp_orders
	                where job_date = '".date("Y-m-d", strtotime($job_date))."'
	                  and job_truck  = '".$job_truck."'
	                  and ((job_time_beg >= '".$job_from.":00' and job_time_beg < '".$job_to.":00')
	                    or (job_time_end > '".(1+$job_from).":00' and job_time_end <= '".$job_to.":00'))
	                  AND order_status_id in (1,5) and id != '".$order_id."'"; 

	    $db =& ConnectionManager::getDataSource('default');
		$result = $db->_execute($query);
		$row = mysql_fetch_array($result);
	    
	    if ($row['cnt']>0) {echo 'There is another job for this truck for this time!'; exit;}

		echo 'OK';
		exit;	
	}

    //Method is used for drag'n'drop mechanism in the schedule view		
	//Added By Metodi
	function changeJobTruckAndHour()
	{
		//1. Get all parrams
		//2. Load Order
		//2.1 Get Job Time duration in hours
		//3. Update Object

		if (($_GET['order_id'] != "") && ($_GET['job_truck'] != "") && ($_GET['beg_hour'] != ""))
		{
			$this->Order->id = $_GET['order_id'];
			$o = $this->Order->read();
			$job_date = $o['Order']['job_date'];
			$hoursRange = date("H", strtotime($o['Order']['job_time_end'])) - date("H", strtotime($o['Order']['job_time_beg']));
			if(date("H", strtotime($_GET['beg_hour'])) == 18)
			{
				$end_hour = date("H", strtotime($_GET['beg_hour'])).":00:00";
			}
			elseif (date("H", strtotime($_GET['beg_hour'])) + $hoursRange > 18)
			{
				$end_hour = "18:00:00";
			}
			else
			{
				$end_hour = date("H", strtotime($_GET['beg_hour'])) + $hoursRange.":00:00";
			}
        
			// If the truck has been changed we should empty technicians' fields
			if ($o['Order']['job_truck'] != $_GET['job_truck'])
			{
				$o['Order']['job_technician1_id'] = 0;
				$o['Order']['job_technician2_id'] = 0;
				$sql = "select job_technician1_id, job_technician2_id
					  from ace_rp_orders 
					WHERE order_status_id!=3 and job_truck=".$_GET['job_truck']."
					  and job_date='".$job_date."'";
				
				$db =& ConnectionManager::getDataSource('default');
				$result = $db->_execute($sql);
				while($row = mysql_fetch_array($result))
				{
					$o['Order']['job_technician1_id'] = $row['job_technician1_id'];
					$o['Order']['job_technician2_id'] = $row['job_technician2_id'];
				}
			}
			
			// if the time has been changed, we should set this job to the 'changed' substatus
			if ((date("H", strtotime($o['Order']['job_time_beg'])) != date("H", strtotime($_GET['beg_hour'])))
				&&($o['Order']['order_substatus_id']!=8))
				$o['Order']['order_substatus_id'] = 6;
      
			$o['Order']['job_truck'] = $_GET['job_truck'];
			$o['Order']['job_time_beg'] = $_GET['beg_hour'];
			$o['Order']['job_time_end'] = $end_hour;
			
			$this->Order->save($o);			
		}
		
		print json_encode(array('order_id' => $_GET['order_id']));
		exit;
	}
	
	function feedbacks_list()
	{
		$this->layout="list";

		//CUSTOM PAGING
		//*************s
		$itemsCount = 30;
		$currentPage = 0;
		$previousPage = 0;
		$nextPage = 1;
		
		if(isset($_GET['page'])){
			if(is_numeric($_GET['page'])){
				$currentPage = $_GET['page'];
			}
		}
		$sqlPaging = " LIMIT 0,".$itemsCount;
		if($currentPage > 0){
			$firstItem = ($currentPage*$itemsCount)+1;
			$sqlPaging = " LIMIT ".$firstItem.",".$itemsCount;
		
			$previousPage = $currentPage -1;
			$nextPage = $currentPage +1;
		}
		//********************
		//END OF CUSTOM PAGING		
		
		//**********
		//CONDITIONS
		//Convert date from date picker to SQL format
		if ($this->params['url']['ffromdate'] != '')
			$this->params['url']['ffromdate'] = date("Y-m-d", strtotime($this->params['url']['ffromdate']));
    else
      $this->params['url']['ffromdate'] = date("Y-m-d", strtotime(date("d M Y")) - 24*60*60);

		if ($this->params['url']['ftodate'] != '')
			$this->params['url']['ftodate'] = date("Y-m-d", strtotime($this->params['url']['ftodate']));
    else
      $this->params['url']['ftodate'] = date("Y-m-d", strtotime(date("d M Y")) - 24*60*60);

		//Pick today's date if no date
		$fdate = ($this->params['url']['ffromdate'] != '' ? $this->params['url']['ffromdate']: "" ) ;
		$tdate = ($this->params['url']['ftodate'] != '' ? $this->params['url']['ftodate']: "" ) ;
		$phone = $this->params['url']['fphone'];

		$allTechnicians = $this->Lists->Technicians();
    $ftechid = $this->params['url']['ftechid'];
		if ($this->Common->getLoggedUserRoleID()==1) $ftechid = $this->Common->getLoggedUserID();
		$allQuality = array('BAD'=>'BAD','OK'=>'OK','GOOD'=>'GOOD','EXCELLENT'=>'EXCELLENT');
    $fquality = $this->params['url']['fquality'];
		//CONDITIONS
		//**********
    
    $allJobTypes = $this->Lists->ListTable('ace_rp_order_types');
		
		$db =& ConnectionManager::getDataSource('default');
		if($fdate != '')
			$sqlConditions .= " AND a.job_date >= '".$this->Common->getMysqlDate($fdate)."'"; 
		if($tdate != '')
			$sqlConditions .= " AND a.job_date <= '".$this->Common->getMysqlDate($tdate)."'"; 
		if($ftechid)
			$sqlConditions .= " AND (a.job_technician1_id=$ftechid or a.job_technician2_id=$ftechid)"; 
		if($fquality)
			$sqlConditions .= " AND a.feedback_quality='$fquality'"; 
		if($phone != '')
			$sqlConditions .= " AND u.phone LIKE '%".$phone."%' ";

		//If user is Limited Telemarketer - role id=9
		//then show only orders that belongs to him
		if (($_SESSION['user']['role_id'] == 3) || ($_SESSION['user']['role_id'] == 9)) { // TELEMARKETER=3 or LIMITED TELEMARKETE9 ($_SESSION['user']['role_id'] == 3) || 
			$sqlConditions.= " AND a.booking_source_id=".$this->Common->getLoggedUserID();
		}
			
		$orders = array();
		$query = "SELECT 		a.id, a.order_number,
						a.job_date,
						a.order_type_id,
						a.customer_id,
						a.job_technician1_id,
						a.job_technician2_id,
						a.feedback_callback_date,
						a.feedback_price,
						a.feedback_comment,
						if (a.feedback_sticker=1,'Yes',if (a.feedback_sticker=0,'No','')) feedback_sticker,
						if (a.feedback_number=1,'Yes',if (a.feedback_number=0,'No','')) feedback_number,
						a.feedback_suggestion,
						a.feedback_quality,
						
						u.first_name,
						u.last_name,
						u.phone as customer_phone,
						u.callback_date

			FROM 			`ace_rp_orders` as a
			INNER JOIN		`ace_rp_users` as u on ( a.customer_id = u.id )
			WHERE 	order_status_id in (1,5) ".$sqlConditions." order by u.callback_date desc ".$sqlPaging;

		//echo $query;
		$result = $db->_execute($query);
		while($row = mysql_fetch_array($result)) {
				//Transfer all fields from the query result
				foreach ($row as $k => $v)
					$orders[$row['id']][$k] = $v;

			$orders[$row['id']]['customer_name'] = $row['first_name'].' '.$row['last_name'];
			$orders[$row['id']]['tech1_name'] = $allTechnicians[$row['job_technician1_id']];
			$orders[$row['id']]['tech2_name'] = $allTechnicians[$row['job_technician2_id']];
      $orders[$row['id']]['job_type'] = $allJobTypes[$row['order_type_id']];
      
      $totals = $this->Common->getOrderTotal($row['id']);
			$orders[$row['id']]['total'] = $totals['sum_total'];
		}
		
		$this->set("previousPage",$previousPage);
		$this->set("nextPage",$nextPage);
		$this->set("orders", $orders);
		$this->set("phone", $phone);
		$this->set("ftechid", $ftechid);
		$this->set("fquality", $fquality);
		$this->set('allTechnician', $allTechnicians);
		$this->set('allQuality', $allQuality);
    $this->set('prev_fdate', date("d M Y", strtotime($fdate) - 24*60*60));
    $this->set('next_tdate', date("d M Y", strtotime($tdate) + 24*60*60));
		if($fdate!='')
			$this->set('fdate', date("d M Y", strtotime($fdate)));
		if($tdate!='')
			$this->set('tdate', date("d M Y", strtotime($tdate)));

	}
	
	function feedbacks_add()
	{
		$this->layout="edit";
		
		if (!empty($this->data))
		{
			$errorExist = 0;
			if($this->data['Order']['feedback_price'] =='')
			{
				$this->set('errorMessage', 'Please enter price.');
				$errorExist = 1;
			}
			else{ 
				if(!is_numeric($this->data['Order']['feedback_price']))
				{
					$this->set('errorMessage', 'Please enter correct price - price is invalid!');
					$errorExist = 1;
				}
				else
					$price = $this->data['Order']['feedback_price'];
			}

			$feedback_comment = $this->data['Order']['feedback_comment'];
			$feedback_price = $this->data['Order']['feedback_price'];
			$call_back_date = $_POST['callback_date'];
			$feedback_sticker = $this->data['Order']['feedback_sticker'];
			$feedback_number = $this->data['Order']['feedback_number'];
			$feedback_suggestion = $this->data['Order']['feedback_suggestion'];
      $call_result_id = 2;
			if($_POST['callback_date'] =='') $call_result_id = 3;
				
			if($errorExist == 1)
			{
				if( $this->params['url']['id'] > 0)
        {
					$this->Order->id = $this->params['url']['id'];
					$this->data = $this->Order->read();
					$this->set('callback_date', $call_back_date);
					$this->data['Order']['feedback_suggestion'] = $feedback_suggestion;
					$this->data['Order']['feedback_number'] = $feedback_number;
					$this->data['Order']['feedback_sticker'] = $feedback_sticker;
					$this->data['Order']['feedback_price'] = $feedback_price;
          $this->data['Order']['feedback_comment'] = $feedback_comment;
						
					//Set Query string back to hidden field (Search fields form list page)
					$this->set('search_query',$_POST["search_query"]);								
				}
				
				$this->render();
				exit;
			}
			
			$this->data['Order']['feedback_callback_date'] = date("Y-m-d", strtotime($_POST['callback_date'] ));			
			if ($this->data['Order']['feedback_professional']=='on')
				$this->data['Order']['feedback_professional']=1;
			else
				$this->data['Order']['feedback_professional']=0;
				
			if ($this->data['Order']['feedback_knowledgeable']=='on')
				$this->data['Order']['feedback_knowledgeable']=1;
			else
				$this->data['Order']['feedback_knowledgeable']=0;
				
			if ($this->data['Order']['feedback_skilled']=='on')
				$this->data['Order']['feedback_skilled']=1;
			else
				$this->data['Order']['feedback_skilled']=0;
				
			if ($this->data['Order']['feedback_clear']=='on')
				$this->data['Order']['feedback_clear']=1;
			else
				$this->data['Order']['feedback_clear']=0;
				
			if ($this->data['Order']['feedback_timing']=='on')
				$this->data['Order']['feedback_timing']=1;
			else
				$this->data['Order']['feedback_timing']=0;
				
			if ($this->data['Order']['feedback_not_professional']=='on')
				$this->data['Order']['feedback_not_professional']=1;
			else
				$this->data['Order']['feedback_not_professional']=0;
				
			if ($this->data['Order']['feedback_not_knowledgeable']=='on')
				$this->data['Order']['feedback_not_knowledgeable']=1;
			else
				$this->data['Order']['feedback_not_knowledgeable']=0;
				
			if ($this->data['Order']['feedback_not_skilled']=='on')
				$this->data['Order']['feedback_not_skilled']=1;
			else
				$this->data['Order']['feedback_not_skilled']=0;
				
			if ($this->data['Order']['feedback_not_clear']=='on')
				$this->data['Order']['feedback_not_clear']=1;
			else
				$this->data['Order']['feedback_not_clear']=0;
				
			if ($this->data['Order']['feedback_not_timing']=='on')
				$this->data['Order']['feedback_not_timing']=1;
			else
				$this->data['Order']['feedback_not_timing']=0;

			if (($this->data['Order']['feedback_sticker']!='0')&&($this->data['Order']['feedback_sticker']!='1'))
				$this->data['Order']['feedback_sticker'] = 3;
			if (($this->data['Order']['feedback_number']!='0')&&($this->data['Order']['feedback_number']!='1'))
				$this->data['Order']['feedback_number'] = 3;

			$this->Order->id = $this->data['id'];
			if ($this->Order->save($this->data['Order']))
			{
				$this->AddCallToHistory($_REQUEST['customer_id'], $this->Common->getLoggedUserID(), $call_result_id,
                                'Feedback', $call_back_date, '', '', '', 57145);
        
        $this->redirect('orders/feedbacks_list?'.$_POST["search_query"]);
        exit();
			}
		}
		else{
			$this->set('search_query',$_SERVER['QUERY_STRING']);
			$allTechnicians = $this->Lists->Technicians();
			
			if( $this->params['url']['id'] > 0) {
				$this->Order->id = $this->params['url']['id'];
				$this->data = $this->Order->read();
				
				if($this->data['Order']['id'] == ''){ //invalid order id
					$this->redirect('orders/feedbacks_list?'.$_SERVER['QUERY_STRING']);
					exit();
				}

				$this->data['Tech1'] = $allTechnicians[$this->data['Order']['job_technician1_id']];
				$this->data['Tech2'] = $allTechnicians[$this->data['Order']['job_technician2_id']];
				
				if($this->data['Customer']['callback_date'] !='')
					$this->set('callback_date', date("d M Y", strtotime($this->data['Customer']['callback_date'])));
      
        $totals = $this->Common->getOrderTotal($this->data['Order']['id']);
        $this->set('total',$totals['sum_total']);
        
        $job_date = new DateTime($this->data['Order']['job_date']);
        $job_date->modify('+6 month');
        $this->set('callback_date_6',$job_date->format("d M Y"));
        $job_date = new DateTime($this->data['Order']['job_date']);
        $job_date->modify('+1 year');
        $this->set('callback_date_12',$job_date->format("d M Y"));
        $this->set('callback_date_dnc','');
			}

			else {
				$this->redirect('orders/feedbacks_list?'.$_SERVER['QUERY_STRING']);
				exit();
			}
		}
	}

	// Method creates an HTML table with customer jobs' history
	function showCustomerJobs()
	{
		$customer_id = $_GET['customer_id'];
		$order_id = $_GET['order_id'];
		$phone = $_GET['phone'];
		  
		if ($this->Common->getLoggedUserRoleID() != "1") $method = "editBooking"; else $method = "techBooking";
		$allStatuses = $this->Lists->ListTable('ace_rp_order_statuses');
		$allJobTypes = $this->Lists->ListTable('ace_rp_order_types');

		echo '<table class="historytable">';
		echo '<tr cellpadding="10">';
		echo '<th>Date</th><th>Booking</th><th>Status</th><th>Tech</th>';
		if ($this->Common->getLoggedUserRoleID() == 6) echo '<th>Feedback</th>';
		echo '</tr>';
		echo "<tr><td colspan=8 style=\"background: #AAAAAA; height: 5px;\"></td></tr>\n";
    
		if ($phone)
		{
			$sq_str = preg_replace("/[- \.]/", "", $phone);
			$sq_str = preg_replace("/([?])*/", "[-]*", $phone);
//	    $past_orders = $this->Order->findAll(array('Order.customer_id'=> $customer_id), null, "job_date DESC", null, null, 1);
//			$past_orders = $this->Order->findAll(array('Customer.phone'=> $phone), null, "job_date DESC", null, null, 1);
//	      $past_orders = $this->Order->findAll(array('Order.customer_phone'=> $phone), null, "job_date DESC", null, null, 1);
			$past_orders = array();
			$db =& ConnectionManager::getDataSource('default');
			$query = "select * from ace_rp_orders where customer_phone regexp '$sq_str' order by job_date DESC";

			$result = $db->_execute($query);
			while($row = mysql_fetch_array($result))
				$past_orders[$row['id']] = $row['id'];

			foreach ($past_orders as $cur)
			{
				$p_order = $this->Order->findAll(array('Order.id'=> $cur), null, "job_date DESC", null, null, 1);
				$p_order = $p_order[0];
				if ($p_order['Order']['id'] == $order_id)
					$add = "style=\"background: #FFFF99;\"";
				else 
				{
					if ((($this->Common->getLoggedUserRoleID() != 3)
					   &&($this->Common->getLoggedUserRoleID() != 9)
					   &&($this->Common->getLoggedUserRoleID() != 1))
						||($this->Common->getLoggedUserID()==$p_order['Order']['booking_telemarketer_id']))
						$add = " style=\"cursor: hand; cursor: pointer;\" onclick=\"location.href='./".$method."?order_id=".$p_order['Order']['id']."';\"";
					else 
						$add = "";
				}
            
				$items_text='';
				$total_booked=0;
				$total_extra=0;
				foreach ($p_order['BookingItem'] as $oi)
				{
					$str_sum = round($oi['quantity']*$oi['price'],2);
					if ($oi['class']==0)
					{
						$text = 'booked';
						$total_booked += 0+$str_sum-$oi['discount']+$oi['addition'];
					}
					else 
					{
						$text = 'sold by tech';
						$total_extra += 0+$str_sum-$oi['discount']+$oi['addition'];
					}
					
					if ((($this->Common->getLoggedUserRoleID() != 3)
					  &&($this->Common->getLoggedUserRoleID() != 9))
					  ||($oi['class']==0))
					{
						$items_text .= '<tr>';
						$items_text .= '<td>'.$text.'</td>';
						$items_text .= '<td style="width:200px">'.$oi['name'].'</td>';
						$items_text .= '<td>'.$oi['quantity'].'</td>';
						$items_text .= '<td>'.$this->HtmlAssist->prPrice($oi['price']).'</td>';
						$items_text .= '<td>'.$this->HtmlAssist->prPrice($oi['addition']-$oi['discount']).'</td>';
						//$items_text .= '<td>'.$this->HtmlAssist->prPrice($str_sum).'</td>';
						$items_text .= '</tr>';
					}
				}
				foreach ($p_order['BookingCoupon'] as $oi)
				{
					$str_sum = 0-$oi['price'];
					if ($oi['class']==0)
					{
					  $text = 'booked';
					  $total_booked += 0+$str_sum;
					}
					else 
					{
					  $text = 'sold by tech';
					  $total_extra += 0+$str_sum;
					}
                
					if ((($this->Common->getLoggedUserRoleID() != 3)
						&&($this->Common->getLoggedUserRoleID() != 9))
						||($oi['class']==0))
					{
					  $items_text .= '<tr>';
					  $items_text .= '<td>'.$text.'</td>';
					  $items_text .= '<td style="width:200px">'.$oi['name'].'</td>';
					  $items_text .= '<td>&nbsp;</td>';
					  $items_text .= '<td>'.$this->HtmlAssist->prPrice($str_sum).'</td>';
					  $items_text .= '<td>&nbsp;</td>';
					  //$items_text .= '<td>'.$this->HtmlAssist->prPrice($str_sum).'</td>';
					  $items_text .= '</tr>';
					}
				}
	    
	          echo "<tr class='orderline' valign='top' ".$add." >";
	          echo "<td rowspan=1>".date('d-m-Y', strtotime($p_order['Order']['job_date']))."<br>REF#".$p_order['Order']['order_number']."</td>";
	          echo "<td rowspan=1>".$this->HtmlAssist->prPrice($total_booked)."</td>";
	          //echo "<td rowspan=1>".$this->HtmlAssist->prPrice($p_order['Order']['customer_paid_amount'])."</td>";
            $status = $p_order['Order']['order_status_id'];
            $color="";
            if (($status == 3)||($status == 2)) $color="color:red";
            if ($status == 5) $color="color:green";
	          echo "<td><b style='".$color."'>".$allStatuses[$status]."</b><br/>";
	          echo $allJobTypes[$p_order['Order']['order_type_id']]."</td>";
	          echo "<td>".$p_order['Technician1']['first_name']."<br/>"
	                    .$p_order['Technician2']['first_name']."</td>";
						if ($this->Common->getLoggedUserRoleID() == 6) 
							echo "<td rowspan=2><a style='text-decoration:none;color:black;' href='".BASE_URL."/orders/feedbacks_add?id=". $p_order['Order']['id']."'><b>".$p_order['Order']['feedback_quality']."</b><br/>".
												"<b>Notes</b>: ".$p_order['Order']['feedback_comment']."<br/>".
												"<b>Solution</b>: ".$p_order['Order']['feedback_suggestion']."</a></td>";
	          echo "</tr>\n";
	          echo "<tr valign='top' ".$add." >";
	          echo "<td colspan=4>";
						echo '<table cellspacing=0 colspacing=5>';
						//echo '<tr><th>&nbsp;</th><th align=left style="width:200px">Item</th><th>Qty</th><th>Price</th><th>Sum</th></tr>';
						echo '<tr><th>&nbsp;</th><th align=left style="width:200px">Item</th><th>Qty</th><th>Price</th><th>Adj</th></tr>';
            echo $items_text;
	          echo '</table>';
	          echo "</td>";
	          echo "</tr>\n";
	          echo "<tr><td colspan=8 style=\"background: #AAAAAA; height: 5px;\"></td></tr>\n";
	        }
	    }
	    
	    echo "</table>";
	    exit;
	}

  // Method returns an HTML code for the given order's item
  function _itemHTML($index, $item, $actions)
  {
    $h = '';
    
    //Class==0 means that this item is from the original booking
    //Class==1 - the item was sold by technitian (extra sale)
    $h .= '<td><input type="hidden" id="data[Order][BookingItem]['.$index.'][class]" name="data[Order][BookingItem]['.$index.'][class]" value="'.$item['class'].'"/>';
    $h .= '<input type="hidden" id="data[Order][BookingItem]['.$index.'][item_id]" name="data[Order][BookingItem]['.$index.'][item_id]" value="'.$item['item_id'].'"/>';
    $h .= '<input type="hidden" id="data[Order][BookingItem]['.$index.'][item_category_id]" name="data[Order][BookingItem]['.$index.'][item_category_id]" value="'.$item['item_category_id'].'"/>';
    if ($item['name']==' CUSTOM PART')
		    $h .= '<input type="text" id="data[Order][BookingItem]['.$index.'][name]" name="data[Order][BookingItem]['.$index.'][name]" value="Write your part here"/>';
    else
        $h .= '<input type="hidden" id="data[Order][BookingItem]['.$index.'][name]" name="data[Order][BookingItem]['.$index.'][name]" value="'.$item['name'].'"/>'.$item['name'];

    if (($item['item_category_id']==4)&&(($this->Common->getLoggedUserRoleID() == 6)||($this->Common->getLoggedUserRoleID() == 1)))
	{
      //$h .= '<br/>part # <input style="width:80px" type="text" id="data[Order][BookingItem]['.$index.'][part_number]" name="data[Order][BookingItem]['.$index.'][part_number]" value="'.$item['part_number'].'"/><br/>';
		$h .= '&nbsp;<select id="data[Order][BookingItem]['.$index.'][installed]" name="data[Order][BookingItem]['.$index.'][installed]">';
		$h .= '<option value=0 '.((!$item['installed'])?'selected':'').'>Not installed</option>';
		$h .= '<option value=1 '.(($item['installed'])?'selected':'').'>Installed</option>';
		$h .= '</select>';
	}

    $h .= '</td>';
    
    if (($item['name']=='Discount')||(!$actions))
        $h .= '<td class="quantity"><input style="width:50px" type="hidden" id="data[Order][BookingItem]['.$index.'][quantity]" name="data[Order][BookingItem]['.$index.'][quantity]" value="'.$item['quantity'].'"/>'.$item['quantity'].'</td>';
    else
        $h .= '<td class="quantity"><input style="width:50px" type="text" id="data[Order][BookingItem]['.$index.'][quantity]" name="data[Order][BookingItem]['.$index.'][quantity]" value="'.$item['quantity'].'" onkeyup="TotalCalculation()"/></td>';

    if ((($item['item_id']=='1000')||($item['item_id']=='1001'))&&$actions)
        $h .= '<td class="price"><input style="width:50px" type="text" id="data[Order][BookingItem]['.$index.'][price]" name="data[Order][BookingItem]['.$index.'][price]" value="'.$item['price'].'" onkeyup="TotalCalculation()"/></td>';
    else
        $h .= '<td class="price"><input style="width:50px" type="hidden" id="data[Order][BookingItem]['.$index.'][price]" name="data[Order][BookingItem]['.$index.'][price]" value="'.$item['price'].'"/>'.$item['price'].'</td>';
    
    if ($actions&&($item['item_id']!='1000'))
        $h .= '<td class="discount"><input style="width:50px;color:red;" type="text" id="data[Order][BookingItem]['.$index.'][discount]" name="data[Order][BookingItem]['.$index.'][discount]" value="'.$item['discount'].'" onkeyup="TotalCalculation()"/></td>';
    else
        $h .= '<td class="discount"><input type="hidden" id="data[Order][BookingItem]['.$index.'][discount]" name="data[Order][BookingItem]['.$index.'][discount]" value="'.$item['discount'].'"/><span style="color:red;">'.$item['discount'].'&nbsp;</span></td>';
    
    if ($actions&&($item['item_id']!='1000'))
        $h .= '<td class="addition"><input style="width:50px" type="text" id="data[Order][BookingItem]['.$index.'][addition]" name="data[Order][BookingItem]['.$index.'][addition]" value="'.$item['addition'].'" onkeyup="TotalCalculation()"/></td>';
    else
        $h .= '<td class="addition"><input style="width:50px" type="hidden" id="data[Order][BookingItem]['.$index.'][addition]" name="data[Order][BookingItem]['.$index.'][addition]" value="'.$item['addition'].'"/>'.$item['addition'].'&nbsp;</td>';
    
    //For the parts we have to open the purchase price box
    if (($item['item_id']=='1001')&&$actions)
		$h .= '<td><input style="width:50px" type="text" id="data[Order][BookingItem]['.$index.'][price_purchase]" name="data[Order][BookingItem]['.$index.'][price_purchase]" value="'.$item['price_purchase'].'"/></td>';
    else
		$h .= '<td><input style="width:50px" type="hidden" id="data[Order][BookingItem]['.$index.'][price_purchase]" name="data[Order][BookingItem]['.$index.'][price_purchase]" value="'.$item['price_purchase'].'"/>'.$item['price_purchase'].'</td>';

    $h .= '<td class="amount" id="data[Order][BookingItem]['.$index.'][amount]">'.$this->HtmlAssist->prPrice(round($item['quantity']*$item['price']-$item['discount']+$item['addition'],2)).'</td>';

    if ($this->Common->getLoggedUserRoleID() == 6)
	{
		$h .= '<td style="background:#00bb00;"><input style="width:50px;color:red;background:#c4ffc4;" type="text" id="data[Order][BookingItem]['.$index.'][tech_minus]" name="data[Order][BookingItem]['.$index.'][tech_minus]" value="'.$item['tech_minus'].'"/></td>';
		$h .= '<td style="background:#00bb00;"><input style="width:50px;background:#c4ffc4;" type="text" id="data[Order][BookingItem]['.$index.'][tech]" name="data[Order][BookingItem]['.$index.'][tech]" value="'.$item['tech'].'"/></td>';
	}
    elseif ($this->Common->getLoggedUserRoleID() == 1)
	{
		$h .= '<td style="background:#55bb55;"><input style="width:50px;color:red;background:#c4ffc4;" type="hidden" id="data[Order][BookingItem]['.$index.'][tech_minus]" name="data[Order][BookingItem]['.$index.'][tech_minus]" value="'.$item['tech_minus'].'"/>'.$item['tech_minus'].'</td>';
		$h .= '<td style="background:#55bb55;"><input style="width:50px;background:#c4ffc4;" type="hidden" id="data[Order][BookingItem]['.$index.'][tech]" name="data[Order][BookingItem]['.$index.'][tech]" value="'.$item['tech'].'"/>'.$item['tech'].'</td>';
	}

	if ($actions)
	{
		$checked = '';
		if ($item['print_it']=='on') $checked = '"checked"';
		$h .= '<td><input type="checkbox" id="data[Order][BookingItem]['.$index.'][print_it]" name="data[Order][BookingItem]['.$index.'][print_it]" '.$checked.'/></td>';
		$h .= '<td><img onclick="removeItem('.$index.')" src="'.ROOT_URL.'/app/webroot/img/icon-vsm-delete.png"/></td>';
	}
      
    return $h;
  }
  
  // Method returns an HTML code for a new item for the given order.
  // AJAX version
  function newItemHTML()
  {
    $index=$_GET['index'];
    $actions=$_GET['actions'];
    $item['item_id']=$_GET['item_id'];
    $item['name']=$_GET['name'];
    $item['price']=$_GET['price'];
    $item['quantity']=$_GET['quantity'];
    $item['class']=$_GET['item_class'];
    $item['item_category_id']=$_GET['category'];
    $item['price_purchase']=$_GET['price_purchase'];
    $item['print_it']='on';
    
    echo $this->_itemHTML($index, $item, $actions);
    exit;
  }

  // AJAX. Method returns the list of the given order's items in an HTML format.
  // Created: Anthony Chernikov, 08/25/2010
  function getItems()
  {
    $order_id = $_REQUEST['order_id'];
    $items_type = $_REQUEST['items_type'];
    $enable_actions = $_REQUEST['enable_actions'];
    
    $this->Order->id = $order_id;
    $orderData = $this->Order->read();
    
    echo $this->_getItems($orderData, $items_type, $enable_actions);
    exit;
  }
  
  // Method returns the list of the given order's items in an HTML format.
  // Created: Anthony Chernikov, 08/25/2010
  function _getItems(&$orderData, $items_type, $enable_actions)
  {
    $num_items = 0;
    $h_booked='';
    $h_tech='';
    foreach ($orderData['BookingItem'] as $oi)
    {
      if ($oi['class']==0)
      {
        $h_booked .= '<tr id="order_'.$num_items.'" class="booked">';
        $h_booked .= $this->_itemHTML($num_items, $oi, $enable_actions);
        $h_booked .= '</tr>';
      }
      else
      {
        $h_tech .= '<tr id="order_'.$num_items.'" class="extra">';
        $h_tech .= $this->_itemHTML($num_items, $oi, $enable_actions);
        $h_tech .= '</tr>';
      }
      $num_items++;
    }
    foreach ($orderData['BookingCoupon'] as $oi)
    {
      $oi['price'] = 0-$oi['price'];
      $oi['quantity'] = 1;
      $oi['name'] = 'Discount';
      $h_booked .= '<tr id="order_'.$num_items.'" class="booked">';
      $h_booked .= $this->_itemHTML($num_items, $oi, $enable_actions);
      $h_booked .= '</tr>';
      $num_items++;
    }
    
    if ($items_type == 0)
        $Ret = $h_booked;
    elseif ($items_type == 1)
        $Ret = $h_tech;
    else
        $Ret = array('h_booked' => $h_booked,
                     'h_tech' => $h_tech,
                     'num_items' => $num_items);
    
    return $Ret;
  }

 	// Method draws the table for this booking detalizaion
	// Created: Anthony Chernikov, 06/2010
	function _showQuestions($order_id,$question_type,$job_type,$strStyle)
	{
		if (!$strStyle) $strStyle='class="inResultsBooking"';
    $h .= '
    <table id="DetailsTable" cellspacing=0 colspacing=0 ' .$strStyle .'>
    <tr>
      <th>#</th>
      <th>Question / Hint</th>
      <th>Answer</th>
      <th>&nbsp</th>
		</tr>';
		
    $db =& ConnectionManager::getDataSource($this->User->useDbConfig);

    if ($question_type==0) $condition = "for_office=1 and";
    else $condition = "for_office=0 and";

		// If $order_id is set - ignore $job_type.
    $are_here=false;
    if ($order_id)
    {
        $query="select count(*) cnt from ace_rp_orders_questions where $condition order_id='$order_id'";
        $result = $db->_execute($query);
        $row = mysql_fetch_array($result,MYSQL_ASSOC);
        if ($row['cnt']!=0) $are_here=true;
    }
    
    $for_tech = true;
    if (($this->Common->getLoggedUserRoleID() == "3")
      ||($this->Common->getLoggedUserRoleID() == "9")
	  ||($this->Common->getLoggedUserRoleID() == "13")) 
    {
    	$for_tech = false;
    }
    
    if ($are_here)
        $query="select * from ace_rp_orders_questions where $condition order_id=$order_id order by question_number";
    elseif ($job_type)
        $query="select * from ace_rp_order_types_questions where $condition order_type_id=$job_type order by question_number";
    else return '';
            
    $index = 0;    
    $result = $db->_execute($query);
    while ($row = mysql_fetch_array($result,MYSQL_ASSOC))
    {
        if (0+$row['for_office']==0)
        {
            if ($row['local_answer']=='') $row['local_answer']=' ';
            if ($for_tech)
                $ttt = '';
            else
                $ttt = 'style="display:none"';
        }
    	
        $h .= '<tr '.$ttt.' id="question_'.$index.'">';
        $h .= '<td style="color:#000000" rowspan=2><input type="hidden" name="data[Order][OrdersQuestions]['.$index.'][id]" id="data[Order][OrdersQuestions]['.$index.'][id]" value="'.$row['id'].'"/>';
        $h .= '<input type="hidden" name="data[Order][OrdersQuestions]['.$index.'][for_office]" id="data[Order][OrdersQuestions]['.$index.'][for_office]" value="'.$row['for_office'].'"/>';
        $h .= '<input type="hidden" name="data[Order][OrdersQuestions]['.$index.'][for_tech]" id="data[Order][OrdersQuestions]['.$index.'][for_tech]" value="'.$row['for_tech'].'"/>';
        $h .= '<input type="hidden" name="data[Order][OrdersQuestions]['.$index.'][question_id]" id="data[Order][OrdersQuestions]['.$index.'][question_id]" value="'.$row['question_id'].'"/>';
        $h .= '<input type="hidden" name="data[Order][OrdersQuestions]['.$index.'][question_number]" id="data[Order][OrdersQuestions]['.$index.'][question_number]" value="'.$row['question_number'].'"/>'.$row['question_number'].'</td>';
        $h .= '<td style="color:#000000"><input type="hidden" name="data[Order][OrdersQuestions]['.$index.'][question]" id="data[Order][OrdersQuestions]['.$index.'][question]" value="'.$row['question'].'"/>&nbsp;'.$row['question'].'</td>';
        $h .= '<td style="color:#000000" rowspan=2 colspan=2><input name="data[Order][OrdersQuestions]['.$index.'][local_answer]" id="data[Order][OrdersQuestions]['.$index.'][local_answer]" value="'.$row['local_answer'].'"/></td>';
        $h .= '</tr>';
        $h .= '<tr '.$ttt.' id="question_'.$index.'">';
        $h .= '<td style="color:#550000"><input type="hidden" name="data[Order][OrdersQuestions]['.$index.'][answers]" id="data[Order][OrdersQuestions]['.$index.'][answers]" value="'.$row['answers'].'"/>&nbsp;'.$row['answers'].'</td>';
        $h .= '</tr>';
        $index++;
    }
    
		$h .= '</table>';
		
		return $h;
	}
  
	// Method draws the table for this booking detalizaion (version for AJAX)
	// Created: Anthony Chernikov, 06/2010
	function showQuestions()
	{
    $order_id=$_GET['order_id'];
    $question_type=$_GET['question_type'];
    $job_type=$_GET['job_type'];
    $strStyle=$_GET['strStyle'];
    
		$h = $this->_showQuestions($order_id,$question_type,$job_type,$strStyle);
		
		echo $h;
    exit;
	}
	
    //Method loads customer notes
	function customer_notes(){
		$customer_id = 0;
		$customer_notes = array();
		$customer_name = '';
		
		if($_GET['customer_id'] != '' && $_GET['customer_id'] != 0){
			$customer_id = $_GET['customer_id'];
			$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
			$result = $db->_execute("
			SELECT * FROM ace_rp_users_notes WHERE user_id=".$customer_id." ORDER BY note_date DESC");
			while ($row = mysql_fetch_array($result)) {
				$customer_notes[$row['id']] = $row;
			}
			
			$this->User->id = $customer_id;
			$customer_details = $this->User->read();
			$customer_name = $customer_details['User']['first_name'].' '.$customer_details['User']['last_name'];
		}
		
		$this->set('customer_id',$customer_id);
		$this->set('customer_name',$customer_name);
		$this->set('customer_notes',$customer_notes);
	}
	
	function customer_notes_add_ajax(){
		//Get Parameters
		$return_arr = array();
		
		if(isset($_GET['customer_id'])){
			$customer_id = $_GET['customer_id'];
			if($customer_id > 0) {			
				$note = $_GET['note'];
			
				$loggedUserId = $this->Common->getLoggedUserID();
				$this->User->id = $loggedUserId;
				$loggedUser_details = $this->User->read();
				
				//Insert Note
				$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
				$result = $db->_execute("INSERT INTO ace_rp_users_notes (user_id,note,note_date,created_by)
                                VALUES(".$customer_id.",'".str_replace("'","`",$note)."',now(),'".$loggedUser_details["User"]["first_name"].' '.$loggedUser_details["User"]["last_name"]."')");
			
				$return_arr += array('date'=>date("d-M-y H:i:s"));
				$return_arr += array('note'=>$note);
				$return_arr += array('created_by'=>$loggedUser_details["User"]["first_name"].' '.$loggedUser_details["User"]["last_name"]);				
			}
		}		
				
		print json_encode($return_arr);
		exit;			
	}

	function clients(){
		
		$recordsCount = 0;
		$number_of_call_made = 0;
		$number_of_sales = 0;
		$number_of_call_back = 0;
		$number_of_dnc = 0;
		
		//CUSTOM PAGING
		//*************s
		$itemsCount = 20;
		$currentPage = 0;
		$previousPage = 0;
		$nextPage = 1;
		
		if(isset($_GET['page'])){
			if(is_numeric($_GET['page'])){
				$currentPage = $_GET['page'];
			}
		}
		$sqlPaging = " LIMIT 0,".$itemsCount;
		if($currentPage > 0){
			$firstItem = ($currentPage*$itemsCount); //($currentPage*$itemsCount)+1;
			$sqlPaging = " LIMIT ".$firstItem.",".$itemsCount;
		
			$previousPage = $currentPage -1;
			$nextPage = $currentPage +1;
		}
		//********************
		//END OF CUSTOM PAGING	
		
		//**********
		//CONDITIONS
		//Convert date from date picker to SQL format
		$sort = $_GET['sort'];
		$order = $_GET['order'];
		$SORT_ASC = '&darr;';//'&nbsp;<span class="sortarrow">&Uacute;</span>';
		$SORT_DESC = '&uarr;'; //'&nbsp;<span class="sortarrow">&Ugrave;</span>';

		$sqlOrder = '';
		$sqlSort = $sort;
		switch ( $order ) {
			case 'slastcall_date' :
			$sqlOrder = 't_u.lastcall_date';
			$this->set('slastcall_date',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'scallback_date' :
			$sqlOrder = 't_u.callback_date';
			$this->set('scallback_date',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'sjob_date' :
			$sqlOrder = 't_o.job_date';
			$this->set('sjob_date',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'scity' :
			$sqlOrder = 't_u.city';
			$this->set('scity',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			case 'sjob_type' :
			$sqlOrder = 't_ot.name';
			$this->set('sjob_type',( $sort == 'DESC' ? $SORT_DESC : $SORT_ASC ));
			break;
			
			default : 
			$sqlOrder = 't_o.job_date';
			$sqlSort = 'ASC';
			$this->set('sjob_date',$SORT_DESC);
			break;
		}
		$sqlOrder .= ' '.$sqlSort;
		
		if ($this->params['url']['ffromdate'] != '')
			$this->params['url']['ffromdate'] = date("Y-m-d", strtotime($this->params['url']['ffromdate']));

		if ($this->params['url']['ftodate'] != '')
			$this->params['url']['ftodate'] = date("Y-m-d", strtotime($this->params['url']['ftodate']));

		//Pick today's date if no date
		$fdate = ($this->params['url']['ffromdate'] != '' ? $this->params['url']['ffromdate']: "" ) ;
		$tdate = ($this->params['url']['ftodate'] != '' ? $this->params['url']['ftodate']: "" ) ;
		$city = $this->params['url']['fcity'];
		$jobtype = $this->params['url']['fjobtype'];
		$telem_id = $this->params['url']['ftelem'];
		$filteritems = $this->params['url']['ffilteritems'];//0-all;2-Callback;3-DNC(do not call);4-Not interested;
		//CONDITIONS
		//**********		
		
		$sqlConditions = '';
		$db =& ConnectionManager::getDataSource('default');
		if($fdate != '')
			$sqlConditions .= " AND t_o.job_date >= '".$this->Common->getMysqlDate($fdate)."'"; 
		if($tdate != '')
			$sqlConditions .= " AND t_o.job_date <= '".$this->Common->getMysqlDate($tdate)."'"; 
		if($city != ''){
			$sqlConditions .= " AND t_u.city LIKE '%".$city."%' ";
		}
		if($telem_id > 0){
			$sqlConditions .= " AND s.booking_source_id=".$telem_id;
		}
		//If user is Limited Telemarketer - role id=9
		//then show only orders that belongs to him
		if (($this->Common->getLoggedUserRoleID() == 9) || ($this->Common->getLoggedUserRoleID() == 3)
			|| ($this->Common->getLoggedUserRoleID() == 13))
		{ 
			$sqlConditions.= " AND t_o.booking_source_id=".$this->Common->getLoggedUserID();
		}
		
		$Sign = " != ";
		if($filteritems == 2){// Callback - show all records that have lastcall_date=current date, because when we click on callback date option then we update last call date to current
			$sqlConditions .= " AND t_u.callback_date='".date("Y-m-d")."'";
		}
		else if($filteritems == 3){ //Do not Call
			$Sign = " = ";
		}
		else if($filteritems == 4){// Not Interested
			$sqlConditions .= " AND t_u.callresult=1 ";
		}
		$sqlConditions .= " AND t_u.callresult".$Sign."2 ";
		
//		if($filteritems != 3){ //Do not Call - do not show DNC records in main query
//			$sqlConditions .= " AND t_u.callresult<>2 ";
//		}
		
		//GET TOTAL RECORDS
		$query = "SELECT DISTINCT
				t_u.id, t_u.first_name as u_fn, t_u.last_name as u_ln,
				t_u.phone as customer_phone, t_u.callback_date,
				t_u.lastcall_date,t_u.callresult, t_o.order_status_id,
				t_u.address as customer_address,t_u.city as customer_city
			    FROM
				ace_rp_users t_u
			    INNER JOIN ace_rp_orders t_o on t_u.id = t_o.customer_id
			    WHERE (t_o.job_date > DATE('1900-01-01')) 
			      AND (t_o.order_status_id IN (1,5)) ".$sqlConditions;

		//echo $query."<br/><br/>";
		$recordsCount = 0;
		$number_of_call_made = 0;
		$number_of_sales = 0;
		$number_of_call_back = 0;
		$number_of_dnc = 0;
		$result = $db->_execute($query);
		while($row = mysql_fetch_array($result)) {
			$recordsCount++;
			if($row['callresult'] == "0")
			{
				//If callback_date e > current date, togava trqbva da selektiram callback option-a
				$_callback_date = $row['callback_date'];
				$_current_date = date("Y-m-d"); 
				if(strtotime($_callback_date) > $_current_date)
				{
					$number_of_call_back++;
				}
				else 
				{
					$number_of_sales++;
				}
			}
			else if ($row['callresult'] == "2") $number_of_dnc++;
		}
		
		//otnosno
		//shte trqbva new table v koqto da se pazaqt broi za vsqko - poneje moje za edin zapis (user) da se napravqt nqkolko call_made, etc.
		//pri update da vnimavam za concurency
		
		//******************************
		
		//GET RECORDS PER LIST
		$orders = array();
		//SELECT ONLY BOOKED(1) and DONE(5) orders: 
		$query = "SELECT DISTINCT
				t_u.id, t_u.first_name as u_fn, t_u.last_name as u_ln,
				t_u.phone as customer_phone, t_u.callback_date,
				t_u.lastcall_date,t_u.callresult, t_o.order_status_id,
				t_u.address as customer_address,t_u.city as customer_city,
				t_tu.first_name as tu_fn, t_tu.last_name as tu_ln
			    FROM
				ace_rp_users t_u
			    LEFT JOIN ace_rp_users t_tu ON (t_u.telemarketer_id=t_tu.id)
			    INNER JOIN ace_rp_orders t_o on t_u.id = t_o.customer_id
			    LEFT JOIN ace_rp_order_types t_ot on (t_o.order_type_id = t_ot.id)
			    WHERE (t_o.job_date > DATE('1900-01-01')) AND (t_o.order_status_id IN (1,5)) ".$sqlConditions."
			    ORDER BY ".$sqlOrder.' '.$sqlPaging;
					
		//echo $query;
		//exit;
		$result = $db->_execute($query);
		while($row = mysql_fetch_array($result)) {
			$orders[$row['id']]['customer_id'] = $row['id'];
			$orders[$row['id']]['customer_name'] = $row['u_fn'].' '.$row['u_ln'];
			$orders[$row['id']]['customer_callback_date'] = $row['callback_date'];
			$orders[$row['id']]['customer_lastcall_date'] = $row['lastcall_date'];
			$orders[$row['id']]['order_status_id'] = $row['order_status_id'];
			
			if($row['callresult'] == "0")
			{
				//If callback_date e > current date, togava trqbva da selektiram callback option-a
				$_callback_date = $row['callback_date'];
				$_current_date = date("Y-m-d"); 
				if(strtotime($_callback_date) > $_current_date){
					$orders[$row['id']]['customer_callback_result'] = 'cb';
				}
			}
			else
			{
				$orders[$row['id']]['customer_callback_result'] = $row['callresult'];
			}
			
			$orders[$row['id']]['customer_phone'] = $row['customer_phone'];
			$orders[$row['id']]['customer_address'] = $row['customer_address'];
			$orders[$row['id']]['customer_city'] = $row['customer_city'];
			$orders[$row['id']]['customer_telemarketer'] = $row['tu_fn'].' '.$row['tu_ln'];

			//2. Get order details
			/*$orders[$row['id']]['id'] = $row['id'];
			//$orders[$row['id']]['order_type_id'] = $row['order_type_id'];
			$orders[$row['id']]['order_type_name'] = $row['order_type_name'];
			$orders[$row['id']]['job_date'] = $row['job_date'];
			$orders[$row['id']]['customer_paid_amount'] = $row['customer_paid_amount'];*/
			
			$orders[$row['id']]['has_feedback'] = $row_order['feedback_callback_date'] != '' ? 1 : 0;
			$query_order = "SELECT t_o.id,t_o.job_date,t_ot.name as order_type_name,t_o.customer_paid_amount,
						t_o.feedback_callback_date
					FROM
					    ace_rp_orders t_o
					LEFT JOIN ace_rp_order_types t_ot on (t_o.order_type_id = t_ot.id) 
					    
					WHERE
					     (t_o.job_date > DATE('1900-01-01'))
					      AND
					      t_o.customer_id=".$row['id']."
					ORDER BY t_o.job_date desc
					LIMIT 0,1";
			$result_order = $db->_execute($query_order);
			while($row_order = mysql_fetch_array($result_order)) {
				$orders[$row['id']]['id'] = $row_order['id'];
				//$orders[$row['id']]['order_type_id'] = $row_order['order_type_id'];
				$orders[$row['id']]['order_type_name'] = $row_order['order_type_name'];
				$orders[$row['id']]['job_date'] = $row_order['job_date'];
				$orders[$row['id']]['customer_paid_amount'] = $row_order['customer_paid_amount'];
				
				$orders[$row['id']]['has_feedback'] = $row_order['feedback_callback_date'] != '' ? 1 : 0;
	
			}
			
		}
	
		//LOAD MAIN DATA
		$this->set("previousPage",$previousPage);
		$this->set("nextPage",$nextPage);
		$this->set("orders", $orders);

		if($fdate!='')
			$this->set('fdate', date("d M Y", strtotime($fdate)));
		if($tdate!='')
			$this->set('tdate', date("d M Y", strtotime($tdate)));
		$this->set("city", $city);
		$this->set("jobtype", $jobtype);
		$this->set("telem_id", $telem_id);
		$this->set("filteritems", $filteritems);

		$this->set('recordsCount',$recordsCount);
		$this->set('number_of_call_made',$number_of_call_made);
		$this->set('number_of_sales',$number_of_sales);
		$this->set('number_of_call_back',$number_of_call_back);
		$this->set('number_of_dnc',$number_of_dnc);
		//Load Job Types
		//**************
		$jobtypes = $this->OrderType->findAll(null, null, array("name ASC"));
		$this->set('jobtypes', $jobtypes);
		//List all Telemarketers
		//**********************
		$telems = array();
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$result = $db->_execute("
		SELECT a.id,CONCAT(a.first_name,' ',a.last_name) as name 
		FROM ace_rp_users as a,ace_rp_users_roles as b
		WHERE a.is_active=1 AND a.id = b.user_id and b.role_id in (3,9) 
		ORDER BY name");
		while ($row = mysql_fetch_array($result)) {
			$telems[] = $row;
		}
		$this->set('allTelems',$telems);

		//**************************
		$this->set('call_results', $this->HtmlAssist->table2array($this->CallResult->findAll(), 'id', 'name'));
		$this->set('booking_sources', $this->HtmlAssist->table2array($this->Order->Source->execute('SELECT ace_rp_users_roles.role_id as role_id, ace_rp_users.id as id, ace_rp_users.first_name as first_name, ace_rp_users.last_name as last_name FROM ace_rp_users, ace_rp_users_roles WHERE ace_rp_users.is_active=1 AND ace_rp_users.id=ace_rp_users_roles.user_id AND (ace_rp_users_roles.role_id=1 OR ace_rp_users_roles.role_id=3 OR ace_rp_users_roles.role_id=7 OR ace_rp_users_roles.role_id=9) ORDER BY ace_rp_users_roles.role_id DESC, ace_rp_users.first_name'), 'id', 'first_name', 'ace_rp_users_roles', 'role_id'));

	}		
    
    function saveCallRecord()
    {
        $customer_id = $_GET['customer_id'];
        if ($customer_id)
        {
            $this->data['Customer']['id'] = $customer_id;
        }
        $this->data['Customer']['first_name'] = $_GET['customer_first_name'];
        $this->data['Customer']['last_name'] = $_GET['customer_last_name'];
        $this->data['Customer']['address'] = $_GET['customer_address'];
        $this->data['Customer']['phone'] = $_GET['customer_phone'];
        $this->data['Customer']['cell_phone'] = $_GET['customer_cell_phone'];
        $this->data['Customer']['city'] = $_GET['customer_city'];
        $this->data['Customer']['postal_code'] = $_GET['customer_postcode'];
        $this->data['Customer']['email'] = $_GET['customer_email'];
        $this->_SaveCustomer();
        if (!$customer_id)
        {
            $customer_id = $this->data['Customer']['id'];
        }
        
        $this->AddCallToHistory(
            $customer_id,
            $_GET['call_user'],
            $_GET['callresult'],
            $_GET['callback_reason'],
            $_GET['callback_date'],
            $_GET['callback_time'],
            $_GET['call_id'],
            $_GET['dialer_id'],
            $_GET['callback_user']
        );
        
        echo $customer_id;
        exit;
    }
    
    //AJAX method for the saving of customer's data only
    function saveCustomerData()
    {
        $customer_id = $_GET['customer_id'];
        if ($customer_id)
        {
            $this->data['Customer']['id'] = $customer_id;
        }
        $this->data['Customer']['first_name'] = $_GET['customer_first_name'];
        $this->data['Customer']['last_name'] = $_GET['customer_last_name'];
        $this->data['Customer']['address'] = $_GET['customer_address'];
        $this->data['Customer']['phone'] = $_GET['customer_phone'];
        $this->data['Customer']['cell_phone'] = $_GET['customer_cell_phone'];
        $this->data['Customer']['city'] = $_GET['customer_city'];
        $this->data['Customer']['postal_code'] = $_GET['customer_postcode'];
        $this->data['Customer']['email'] = $_GET['customer_email'];
        $this->_SaveCustomer();
        if (!$customer_id)
        {
            $customer_id = $this->data['Customer']['id'];
        }
        
        echo $customer_id;
        exit;
    }
	
	// Method adds a new record to the client's calls history table
	function AddCallToHistory($customer_id, $call_user, $callresult, $call_note, $callback_date, $callback_time, $call_id='', $dialer_id='', $callback_user='', $record_id='')
	{	
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
    
		// If caller is not mentioned - set the current user as a caller
		if (!$call_user) $call_user = $this->Common->getLoggedUserID();
		if ($callback_user == '') $callback_user = $call_user;

		// Set the callback parameters: date, time and user 
		$scheduled_date = "''";
		$scheduled_time = "''";
		$callback_reason = $call_note;
		// call result : not 'Not In Service', not 'Answering Machine'
		if (($callresult != 7)&&($callresult != 6)) 
		{
			if ($callresult == 1) // call result : SALE
			{	
				// Move the call forward, 6 month from now
				$scheduled_date = 'now() + INTERVAL 6 MONTH';
				$scheduled_time = 'current_time()';
				$callback_reason = 'Sale. Callback in 6 months';
		     	$callback_user = 57145; //ACE
			}
			elseif ($callresult == 2) // call result : CALLBACK
			{
				$scheduled_date = "str_to_date('" .$callback_date ."', '%d %b %Y')";
				$scheduled_time = "'".$callback_time."'";
				$callback_reason = $call_note;
			}
			elseif ($callresult == 4) // call result : NOT INTERESTED (3 month)
			{
				// Move the call forward, 3 month from now
				$scheduled_date = 'now() + INTERVAL 3 MONTH';
				$scheduled_time = 'current_time()';
				$callback_reason = 'Not interested. Call back in 3 months';
		    	$callback_user = 57145; //ACE
			}
			elseif ($callresult == 8) // call result : NOT INTERESTED (6 month)
			{
				// Move the call forward, 3 month from now
				$scheduled_date = 'now() + INTERVAL 6 MONTH';
				$scheduled_time = 'current_time()';
				$callback_reason = 'Not interested. Call back in 6 months';
		    	$callback_user = 57145; //ACE
			}
			elseif ($callresult == 9) // call result : NOT INTERESTED (9 month)
			{
				// Move the call forward, 3 month from now
				$scheduled_date = 'now() + INTERVAL 9 MONTH';
				$scheduled_time = 'current_time()';
				$callback_reason = 'Not interested. Call back in 9 months';
		    	$callback_user = 57145; //ACE
			}
			elseif ($callresult == 3) // call result : DO NOT CALL
			{
				// Set the date to now
				//$callback_date
				$scheduled_date = "now()";
				$scheduled_time = 'current_time()';
				$callback_reason = 'Do not call';
		    	$callback_user = 57145; //ACE
			}
		}

		// We do not need to multiply calls that are already in the history.
    // So, we remove previous versions of them first
		if ($call_id)
		{
			$query = "delete from ace_rp_call_history
				  where customer_id=".$customer_id."
				  and call_id is not null and call_id=".$call_id;
			$db->_execute($query);
		}
    
    // If we intend to change the record that is already in history,
    // we need to delete this record first
		if ($record_id)
		{
			$query = "delete from ace_rp_call_history where id=".$record_id;
			$db->_execute($query);
		}
	
    $query = "select * from ace_rp_users where id=" .$customer_id;
    $result = $db->_execute($query);
    if ($row = mysql_fetch_array($result, MYSQL_ASSOC)) 
    {
      $phone=$row['phone'];
      $cell_phone=$row['cell_phone'];
    }
    
		// Adds the history's record
		$query = "INSERT INTO ace_rp_call_history
			  (customer_id, call_id, dialer_id,
			   call_date, call_time, call_user_id, 
			   call_result_id, call_note,
			   callback_date, callback_time, callback_user_id,
         phone, cell_phone) 
		VALUES (".$customer_id.", '" .$call_id ."', '" .$dialer_id ."',
				current_date(), current_time(), '".$call_user."', 
				'" .$callresult ."', '" .str_replace("\"","`",str_replace("'","`",$call_note)) ."',
				" .$scheduled_date .", " .$scheduled_time .", '".$callback_user."',
        '".$phone."', '".$cell_phone."')";
    
    	$db->_execute($query);
    	
    	//remembering the last call result
		$query = "update ace_rp_users
					set telemarketer_id = " .$call_user .",
						callback_date = " .$scheduled_date .", 
						callback_time = " .$scheduled_time .", 
						lastcall_date = current_date(), 
						callresult = '" .$callresult ."', 
						callback_note = '" .str_replace("\"","`",str_replace("'","`",$call_note)) ."'
				where id=".$customer_id;
    
    	$db->_execute($query);
	}
	
	// Method adds a string to the calls history table.
	// This is supposed to be called from the outside of the ACE System
	function AddDialerCall()
	{
		$customer_id = $_GET['customer_id'];
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		
		// When we have a new customer here, we need to save his information first
		if (!$customer_id)
		{
			// Check if there is really no this customer. 
			// If we do not do this check we would duplicate the customers,
			// because dialer can send the same information more then once.
		    $cond = '';
        	$query = "select count(*) cnt from ace_rp_users 
					   where phone='".$_GET['phone']."'";
			$result = $db->_execute($query);
			$row = mysql_fetch_array($result);

			if ($row['cnt']==0)
			{
				// If we are sure that there are no such customers - create one
				$this->data['Customer']['first_name'] = $_GET['first_name'];
				$this->data['Customer']['last_name'] = $_GET['last_name'];
				$this->data['Customer']['address'] = $_GET['address'];
				$this->data['Customer']['city'] = $_GET['city'];
				$this->data['Customer']['phone'] = $_GET['phone'];
				$this->Order->Customer->save($this->data['Customer']);
				$customer_id = $this->Order->Customer->getLastInsertId();
			}
		}
		
		$this->AddCallToHistory($customer_id,
					$_GET['call_user'],
					$_GET['callresult'],
					$_GET['callback_reason'],
					$_GET['callback_date'],
					$_GET['callback_time'],
					$_GET['call_id'],
					$_GET['dialer_id']);
		
		echo $customer_id;
		exit;
	}

	function installations()
  {		
		$db =& ConnectionManager::getDataSource('default');

		//CUSTOM PAGING
		//*************s
		$itemsCount = 20;
		$currentPage = 0;
		$previousPage = 0;
		$nextPage = 1;
		
		if(isset($_GET['page'])){
			if(is_numeric($_GET['page'])){
				$currentPage = $_GET['page'];
			}
		}
		$sqlPaging = " LIMIT 0,".$itemsCount;
		if($currentPage > 0){
			$firstItem = ($currentPage*$itemsCount); //($currentPage*$itemsCount)+1;
			$sqlPaging = " LIMIT ".$firstItem.",".$itemsCount;
		
			$previousPage = $currentPage -1;
			$nextPage = $currentPage +1;
		}
		//********************
		//END OF CUSTOM PAGING	
		
		//**********
		//SORTING
		$order = $_GET['order'].' '.$_GET['sort'];
		if ($order==' ') $order = ' o.job_date asc';

		//**********
		//CONDITIONS
		//Pick today's date if no date
		if ($this->params['url']['ffromdate'] != '')
			$this->params['url']['ffromdate'] = date("Y-m-d", strtotime($this->params['url']['ffromdate']));
		else
			$this->params['url']['ffromdate'] = date("Y-m-d");

		if ($this->params['url']['ftodate'] != '')
			$this->params['url']['ftodate'] = date("Y-m-d", strtotime($this->params['url']['ftodate']));
		else
			$this->params['url']['ftodate'] = date("Y-m-d");

		$fdate = ($this->params['url']['ffromdate'] != '' ? $this->params['url']['ffromdate']: "" ) ;
		$tdate = ($this->params['url']['ftodate'] != '' ? $this->params['url']['ftodate']: "" ) ;
		$jobtype = $this->params['url']['fjobtype'];
		$tech = $this->params['url']['ftech'];
		$fsource = $this->params['url']['fsource'];
		$fitem = $this->params['url']['fitem'];

		//CONDITIONS
		//**********		
		$sqlConditions = '';
		if($fdate != '')
			$sqlConditions .= " AND o.job_date >= '".$this->Common->getMysqlDate($fdate)."'"; 
		if($tdate != '')
			$sqlConditions .= " AND o.job_date <= '".$this->Common->getMysqlDate($tdate)."'"; 
		if($jobtype)
			$sqlConditions .= " AND o.order_type_id = '".$jobtype."' ";
		if($tech)
			$sqlConditions .= " AND (o.job_technician1_id = '".$tech."' or o.job_technician2_id = '".$tech."')";
		if($fsource)
			$sqlConditions .= " AND (o.booking_source_id = '".$fsource."' or o.booking_source2_id = '".$fsource."')";
		if($fitem)
			$sqlConditions .= " AND exists (select * from ace_rp_order_items i where i.order_id=o.id and i.item_id = '$fitem')";
		
		//GET RECORDS PER LIST
		$orders = array();
		//SELECT ONLY BOOKED(1) and DONE(5) orders: 
		$query = "select concat(u.first_name, ' ', u.last_name) customer_name,
                    u.address, u.city, u.phone, s.name job_status, s.id job_status_id,
                    o.id job_id, o.job_date, t.name job_type, o.order_number,
                    o.job_technician1_id, o.job_technician2_id,
                    o.permit_applied_date, o.permit_applied_method,
                    o.permit_applied_user, o.permit_result, o.permit_number,
                    o.app_ordered_by, o.app_ordered_date, 
                    o.app_ordered_pickup_date, o.app_ordered_supplier_id,
										o.labor_warranty, o.parts_warranty,
										(select sum(if(s.is_appliance=1,i.price*i.quantity-i.discount+i.addition,0)) from ace_rp_order_items i, ace_rp_items s
											where o.id=i.order_id and i.item_id=s.id) total_appl,
										(select sum(if(s.is_appliance!=1,i.price*i.quantity-i.discount+i.addition,0)) from ace_rp_order_items i, ace_rp_items s
											where o.id=i.order_id and i.item_id=s.id) total_other,
										(select sum(if(s.is_appliance!=1,i.quantity,0)) from ace_rp_order_items i, ace_rp_items s
											where o.id=i.order_id and i.item_id=s.id) cnt_other
               from ace_rp_orders o, ace_rp_order_types t,
                    ace_rp_users u, ace_rp_order_statuses s
              where o.order_type_id=t.id and t.category_id=2
                and o.customer_id=u.id and o.order_status_id=s.id
              ".$sqlConditions."
              order by ".$order.' '.$sqlPaging;

		$result = $db->_execute($query);
		while($row = mysql_fetch_array($result))
		{
			foreach ($row as $k => $v)
			  $orders[$row['job_id']][$k] = $v;
		}
	
		//LOAD MAIN DATA
		$this->set("previousPage",$previousPage);
		$this->set("nextPage",$nextPage);
		$this->set("orders", $orders);
    
		if($fdate!='')
			$this->set('fdate', date("d M Y", strtotime($fdate)));
		if($tdate!='')
			$this->set('tdate', date("d M Y", strtotime($tdate)));
		$this->set('prev_fdate', date("d M Y", strtotime($fdate) - 24*60*60));
		$this->set('next_tdate', date("d M Y", strtotime($tdate) + 24*60*60));
		
		$this->set('jobtype', $jobtype);
		$this->set('tech', $tech);
		$this->set('fsource', $fsource);
		$this->set('fitem', $fitem);

		$this->set('allItems', $this->Lists->ListTable('ace_rp_items', 'is_appliance=1'));
		$this->set('allUsers', $this->Lists->BookingSources());
		$this->set('allJobTypes', $this->Lists->ListTable('ace_rp_order_types'));
		$this->set('allSuppliers',$this->Lists->ListTable('ace_rp_suppliers'));
		$this->set('allPermitMethods',$this->Lists->ListTable('ace_rp_apply_methods'));    
		$this->set('allPermitStates',$this->Lists->ListTable('ace_rp_permit_states'));    
	}
  
  function calc()
  { 
		$prc = $_REQUEST['calc_price'];
		$per = $_REQUEST['calc_period'];
    
    $res['calc_monthly'] = 0;
    $res['calc_total'] = 0;

    if ($per==1)
    {
        $res['calc_monthly'] = round($prc*0.04942,2);
        $res['calc_total'] = round($res['calc_monthly']*24,2);
    }        
    elseif ($per==2)
    {
        $res['calc_monthly'] = round($prc*0.03563,2);
        $res['calc_total'] = round($res['calc_monthly']*36,2);
    }        
    elseif ($per==3)
    {
        $res['calc_monthly'] = round($prc*0.02883,2);
        $res['calc_total'] = round($res['calc_monthly']*48,2);
    }        
    elseif ($per==4)
    {
        $res['calc_monthly'] = round($prc*0.02482,2);
        $res['calc_total'] = round($res['calc_monthly']*60,2);
    }        
    
		print json_encode($res);
    exit;
  }
	
	function permit()
	{
		$city = $_REQUEST['city'];
		$file_name = 'bc safety.pdf';
		if (($city=='VANCOUVER')||($city=='VANCOUVER (EAST)')||($city=='VANCOUVER (WEST)'))
			$file_name = 'gas permit city of vancouver.pdf';
		elseif ($city=='BURNABY')
			$file_name = 'burnaby permit.pdf';
		elseif ($city=='NORTH VANCOUVER')
			$file_name = 'city of nvan permit.pdf';
		elseif ($city=='MAPLE RDGE')
			$file_name = 'gas_permitapplication maple ridge.pdf';
		elseif ($city=='RICHMOND')
			$file_name = 'richmond permit.pdf';

		$this->set('file_name',$file_name);    
	}

	function mapSchedule()
	{
		$this->layout='edit';
    $p_code = strtoupper(substr($_REQUEST['p_code'],0,3));
		$city = strtoupper($_REQUEST['city']);

		if ($this->params['url']['date_from'] != '')
			$date_from = date("Y-m-d", strtotime($this->params['url']['date_from']));
    else
			$date_from = date("Y-m-d");

		$date_to = date("Y-m-d", strtotime("$date_from +1 week"));

    $db =& ConnectionManager::getDataSource('default');
		
		// Get neighbouring areas
		$neighbours = array();
		if ($p_code)
		{
			$neighbours[] = $p_code;
			$result = $db->_execute("select * from ace_rp_map where p_code='$p_code'");
			while($row = mysql_fetch_array($result))
			{
				$neighbours[] = $row['neighbour'];
				$city = $row['city'];
			}
		}
		elseif ($city)
		{
			$neighbours[] = $city;
			$result = $db->_execute("select * from ace_rp_map where city='$city'");
			while($row = mysql_fetch_array($result))
				$neighbours[] = $row['p_code'];
		}

		//Prepare Truck Names
		$map_reverse = array();
		$map_all = array();
		$trucks = array();
		
		$route_type = $_REQUEST['route_type'];
		if (!$route_type)
			if (($this->Common->getLoggedUserRoleID()==1)&&($this->Common->getLoggedUserID()!=44884))
				$route_type = '2';
			elseif (($this->Common->getLoggedUserRoleID()!=6)&&($this->Common->getLoggedUserID()!=44884))
				$route_type = '1';
		
		$cond = '';
		if ($route_type) $cond = 'and route_type='.$route_type;
		
		$query = "select * from ace_rp_inventory_locations where type=2 $cond order by id asc";
		$result = $db->_execute($query);
		while ($row = mysql_fetch_array($result)) {
			$trucks[$row['id']]['id'] = $row['id'];
			$trucks[$row['id']]['name'] = $row['name'];
			$trucks[$row['id']]['color'] = $row['color'];
			$trucks[$row['id']]['truck_number'] = $row['truck_number'];
			$trucks[$row['id']]['route_number'] = $row['route_number'];
			for ($j=2; $j<8; $j++)
			{
				$map_all[$j][$row['id']] = 'ALL';
				for ($i=8; $i<18; $i++)
					$map_reverse[$row['id']][$j][$i][] = 'ALL';
			}
		}
		
		$query = "select o.job_date, o.job_truck, DAYOFWEEK(o.job_date) job_day, o.order_number,
										 hour(o.job_time_beg) hour_beg, hour(o.job_time_end) hour_end,
										 upper(substr(u.postal_code,1,3)) p_code, upper(u.city) city
								from ace_rp_orders o, ace_rp_users u
							 where o.job_date between '$date_from' and '$date_to' 
								 and o.order_status_id in (1,5) and u.id=o.customer_id
							";
		$map_busy = array();
		$dates = array();
		$result = $db->_execute($query);
		while ($row = mysql_fetch_array($result))
		{
			$day = $row['job_day'];
			$date = array();
			$date['weekday_name'] = date("l", strtotime($row['job_date']));
			$date['weekday'] = $day;
			$date['name'] = date("d M Y", strtotime($row['job_date']));
			$date['date'] = date("Y-m-d", strtotime($row['job_date']));
			$dates[strtotime($row['job_date'])] = $date;
			for ($i = $row['hour_beg']; $i < $row['hour_end']; $i++)
			{
				$map_busy[$row['job_truck']][$day][$i] = $row['order_number'];
				unset($map_reverse[$row['job_truck']][$day][$i]);
				unset($map_all[$day][$row['job_truck']]);
				if (isset($map_reverse[$row['job_truck']][$day][$i-1]))
				{
					$map_reverse[$row['job_truck']][$day][$i-1][] = substr($row['p_code'],0,3);
					$map_reverse[$row['job_truck']][$day][$i-1][] = $row['city'];
				}
				if (isset($map_reverse[$row['job_truck']][$day][$i+1]))
				{
					$map_reverse[$row['job_truck']][$day][$i+1][] = substr($row['p_code'],0,3);
					$map_reverse[$row['job_truck']][$day][$i+1][] = $row['city'];
				}
			}
		}

		// Reverce the map
		$map = array();
		if ($city||$p_code)
			foreach ($map_reverse as $truck_k => $time_v)
			{
				foreach ($time_v as $day_k => $day_val)
				{
					foreach ($day_val as $time_k => $map_val)
					{
						foreach ($map_val as $val)
						{
							if (in_array($val, $neighbours))						
								$map[$day_k][$time_k][] = $truck_k;
						}
					}
				}
			}

		$this->set('neighbours', $neighbours);
		$this->set('trucks', $trucks);
		$this->set('map', $map);
		$this->set('map_all', $map_all);
		$this->set('map_busy', $map_busy);
		$this->set('p_code', $p_code);
		$this->set('city', $city);
		$this->set('dates', $dates);
		$this->set('allCities', $this->Lists->ListTable('ace_rp_cities'));
		$this->set('allTypes', $this->Lists->ListTable('ace_rp_route_types'));
		$this->set('date_from', date("d M Y", strtotime($date_from)));
		$this->set('ydate', date("d M Y", strtotime("$date_from - 1 week")));
		$this->set('tdate', date("d M Y", strtotime("$date_from + 1 week")));
	}

	// AJAX method for activation/deactivation of an item
	function changeActive()
	{
		$item_id = $_GET['item_id'];
		$is_active = $_GET['is_active'];
		
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$db->_execute("update ace_rp_orders set flagactive='".$is_active."' where id=".$item_id);

		exit;
	}

	// AJAX method for changing a job's substatus
	function setSubstatus()
	{
		$order_id = $_REQUEST['order_id'];
		$substatus = $_REQUEST['substatus'];
		$userid = $this->Common->getLoggedUserID();
		
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		if ($substatus==4)
			$db->_execute("update ace_rp_orders set order_substatus_id=$substatus, notified_by_id=$userid, notified_when=current_time() where id=$order_id");
		else
			$db->_execute("update ace_rp_orders set order_substatus_id=$substatus, notified_by_id=0 where id=$order_id");

		exit;
	}

	// AJAX method for changing a job's end time
	function setEndTime()
	{
		$order_id = $_REQUEST['order_id'];
		$diff = $_REQUEST['time_diff'];
		
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		$query = "select t.job_time_end from ace_rp_orders t where t.id=$order_id";
		$result = $db->_execute($query);
		$row = mysql_fetch_array($result);
		if ($diff>0)
			$endTime = date("H:i", strtotime($row['job_time_end']." +$diff hour"));
		else
			$endTime = date("H:i", strtotime($row['job_time_end']." $diff hour"));
		
		if ($diff!=0)
		{
			$prev = array();
			$query = "select t.id, t.job_time_beg, t.job_time_end from ace_rp_orders t, ace_rp_orders o
						where o.id=$order_id and t.job_truck=o.job_truck and t.job_time_beg>=o.job_time_end and o.job_date=t.job_date";
			$result = $db->_execute($query);
			while ($row = mysql_fetch_array($result)) $prev[] = $row;
			foreach ($prev as $row)
			{
				if ($diff>0)
				{
					$tNewB = date("H:i", strtotime($row['job_time_beg']." +$diff hour"));
					$tNewE = date("H:i", strtotime($row['job_time_end']." +$diff hour"));
				}
				else
				{
					$tNewB = date("H:i", strtotime($row['job_time_beg']." $diff hour"));
					$tNewE = date("H:i", strtotime($row['job_time_end']." $diff hour"));
				}
				$db->_execute("update ace_rp_orders set job_time_end='$tNewE', job_time_beg='$tNewB', order_substatus_id=8, notified_by_id=0
								where id={$row['id']}");
			}
			
			$db->_execute("update ace_rp_orders set job_time_end='$endTime' where id=$order_id");
		}

		exit;
	}
	
	function sendConfirmationEmail() {
		$db =& ConnectionManager::getDataSource($this->User->useDbConfig);
		
		
		if(isset($_REQUEST['for_date'])) {		
			$settings = $this->Setting->find(array('title'=>'email_fromaddress'));
			$from_address = $settings['Setting']['valuetxt'];
			
			$subject = 'Ace Services Ltd';
	
			//define the headers we want passed. Note that they are separated with \r\n
			//$headers = "From: webmaster@example.com\r\nReply-To: webmaster@example.com";
			$headers = "From: info@acecare.ca\n";
			//add boundary string and mime type specification
			$headers .= "Content-Type: text/html; charset=iso-8859-1\n" ;		
						
			$job_date = $_REQUEST['for_date'];
						
			$query = "
				SELECT u.first_name, u.last_name, u.email, o.job_date,
					DATE_FORMAT(o.job_date, '%M %D, %Y') text_date, 
					DATE_FORMAT(o.job_time_beg, '%r') job_time_beg, 
					DATE_FORMAT(o.job_time_end, '%r') job_time_end
				FROM ace_rp_orders o
				LEFT JOIN ace_rp_users u
				ON o.customer_id = u.id
				WHERE o.job_date = date('$job_date')
				AND u.email 
				NOT IN ('',
					'ace_123@live.ca',
					'ace-123@live.ca',
					'NO EMAIL',
					'N/A',
					'cb@acecare.ca',
					'NONE',
					'ace_123@livenation.ca',
					'N A',
					'a',
					'ACE_123@LIVE.COM',
					'ace_123@live.com',
					'ACE_!23@LIVE.CA',
					'NA')			
			";
			$result = $db->_execute($query);			
			while ($row = mysql_fetch_array($result))
			{
				$msg = "
					Dear ".$row['first_name']." ".$row['last_name'].",<br /><br />
		
					As booked, ACE Services Ltd. will be coming by your home on ".$row['text_date']." between ".$row['job_time_beg']." to ".$row['job_time_end'].".<br /><br />
		
					If you have any questions regarding your booking please give us a call.<br /><br />
		
					Have a nice day!<br /><br />
		
					ACE Services Ltd<br />
					phone: 604-293-3770<br />
					email: info@acecare.ca
				";
				$res = mail($row['email'], $subject, $msg, $headers);
				//$res = mail('hsestacio13@gmail.com', $subject, $msg, $headers);
				
			}
			$db->_execute("INSERT INTO ace_rp_email_confirmations(job_date, is_sent) VALUES('".$job_date."', 1) ");				
		}//end isset($_REQUEST['for_date'])	
		
		$query = "
			SELECT DISTINCT o.job_date, 
			DATE_FORMAT(o.job_date, '%M %D, %Y') textdate, 
			o.job_date - CURDATE() 'days',
			IFNULL(ec.is_sent, 0) is_sent
		FROM ace_rp_orders o
		LEFT JOIN ace_rp_email_confirmations ec
		ON o.job_date = ec.job_date
		WHERE o.job_date > CURDATE()
		AND o.job_date - CURDATE() <= 7
		ORDER BY o.job_date
		";
		$result = $db->_execute($query);			
		$jobs = '';
		while ($row = mysql_fetch_array($result))
		{
			$jobs[$row['job_date']]['job_date'] = $row['job_date'];
			$jobs[$row['job_date']]['textdate'] = $row['textdate'];
			$jobs[$row['job_date']]['days'] = $row['days'];
			$jobs[$row['job_date']]['is_sent'] = $row['is_sent'];
		}
		
		$this->set('jobs', $jobs);
	}
} //end 
?>
